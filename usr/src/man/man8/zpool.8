'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved.
.\" The contents of this file are subject to the terms of the Common Development and Distribution License (the "License"). You may not use this file except in compliance with the License. You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions and limitations under the License. When distributing Covered Code, include this CDDL HEADER in each file and include the License file at usr/src/OPENSOLARIS.LICENSE. If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" Portions Copyright (c) 2012 GreenBytes, Inc. All Rights Reserved.
.\"
.TH zpool 8 "12 Sep 2012" "Darwin" "System Administration Commands"
.SH NAME
zpool \- configures ZFS storage pools
.SH SYNOPSIS
.LP
.nf
\fBzpool\fR [\fB-?\fR]
.fi

.LP
.nf
\fBzpool add\fR [\fB-fn\fR] \fIpool\fR \fIvdev\fR ...
.fi

.LP
.nf
\fBzpool attach\fR [\fB-f\fR] \fIpool\fR \fIdevice\fR \fInew_device\fR
.fi

.LP
.nf
\fBzpool clear\fR [\fB-F\fR [\fB-n\fR]] \fIpool\fR [\fIdevice\fR]
.fi

.LP
.nf
\fBzpool create\fR [\fB-fn\fR] [\fB-o\fR \fIpool-property\fR=\fIvalue\fR] ... [\fB-O\fR \fIfilesystem-property\fR=\fIvalue\fR]
     ... [\fB-m\fR \fImountpoint\fR] [\fB-R\fR \fIroot\fR] \fIpool\fR \fIvdev\fR ...
.fi

.LP
.nf
\fBzpool destroy\fR [\fB-f\fR] \fIpool\fR
.fi

.LP
.nf
\fBzpool detach\fR \fIpool\fR \fIdevice\fR
.fi

.LP
.nf
\fBzpool export\fR [\fB-f\fR] \fIpool\fR ...
.fi

.LP
.nf
\fBzpool get\fR "\fIall\fR" | \fIproperty\fR[,...] \fIpool\fR ...
.fi

.LP
.nf
\fBzpool history\fR [\fB-il\fR] [\fIpool\fR] ...
.fi

.LP
.nf
\fBzpool import\fR [\fB-d\fR \fIdir\fR] [\fB-D\fR]
.fi

.LP
.nf
\fBzpool import\fR [\fB-o\fR \fImntopts\fR] [\fB-o\fR \fIproperty\fR=\fIvalue\fR] ... [-d \fIdir\fR] [-D] [-f] [-m] [-N] [-R \fIroot\fR] [-F [-n]] -a
.fi

.LP
.nf
\fBzpool import\fR [\fB-o\fR \fImntopts\fR] [\fB-o\fR \fIproperty\fR=\fIvalue\fR] ... [-d \fIdir\fR] [-D] [-f] [-m] [-R \fIroot\fR] [-F [-n]] \fIpool\fR | \fIguid\fR [\fInewpool\fR]
.fi

.LP
.nf
\fBzpool iostat\fR [\fB-T\fR d|u] [\fB-v\fR] [\fIpool\fR] ... [\fIinterval\fR[\fIcount\fR]]
.fi

.LP
.nf
\fBzpool list\fR [\fB-H\fR] [\fB-o\fR \fIproperty\fR[,...]] [\fB-T\fR d|u] [\fIpool\fR] ... [\fIinterval\fR[\fIcount\fR]]
.fi

.LP
.nf
\fBzpool offline\fR [\fB-t\fR] \fIpool\fR \fIdevice\fR ...
.fi

.LP
.nf
\fBzpool online\fR \fIpool\fR \fIdevice\fR ...
.fi

.LP
.nf
\fBzpool remove\fR \fIpool\fR \fIdevice\fR ...
.fi

.LP
.nf
\fBzpool replace\fR [\fB-f\fR] \fIpool\fR \fIdevice\fR [\fInew_device\fR]
.fi

.LP
.nf
\fBzpool scrub\fR [\fB-s\fR] \fIpool\fR ...
.fi

.LP
.nf
\fBzpool set\fR \fIproperty\fR=\fIvalue\fR \fIpool\fR
.fi

.LP
.nf
\fBzpool split [\fB-R\fR \fIaltroot\fR] [\fB-n\fR] [\fB-o\fR \fImntopts\fR] [\fB-o\fR \fIproperty\fR=\fIvalue\fR] \fIpool\fR \fInewpool\fR [\fIdevice\fR ...]
.fi

.LP
.nf
\fBzpool status\fR [\fB-xv\fR] [\fB-T\fR d|u] [\fIpool\fR] ... [\fIinterval\fR[\fIcount\fR]]
.fi

.LP
.nf
\fBzpool upgrade\fR [\fB-v\fR]
.fi

.LP
.nf
\fBzpool showdisks\fR
.fi

.SH DESCRIPTION
.sp
.LP
The \fBzpool\fR command configures \fBZFS\fR storage pools. A storage pool is a collection of devices that provides physical storage and data replication for \fBZFS\fR datasets.
.sp
.LP
All datasets within a storage pool share the same space. See \fBzfs\fR(8) for information on managing datasets.
.\"
.\" = = = = = = = = = = VIRTUAL DEVICES = = = = = = = = = =
.\"
.SS "Virtual Devices (\fBvdev\fRs)"
.sp
.LP
A "virtual device" describes a single device or a collection of devices
organized according to certain performance and fault characteristics. The
following virtual devices are supported:
.sp
.ne 2
.mk
.na
\fB\fBdisk\fR\fR
.ad
.RS 10n
.rt  
A single block device. These devices are typically located under "/dev/" (for temporary paths) or
alternatively under "/dev/dsk/" (for the persistent ZFS device paths). Although \fBZFS\fR can use
individual slices (partitions), the recommended configuration is to use dedicated disks (i.e. not
shared with other filesystems). A disk is specified by its full path for temporary disk names but
a shorthand name (the relative portion of the path under "/dev/dsk") of the path under "/dev/dsk")
can be used for a persistent device name. When given a dedicated disk, \fBZFS\fR automatically
partitions the disk (as GPT), if necessary.
.RE

.sp
.ne 2
.mk
.na
\fB\fBmirror\fR\fR
.ad
.RS 10n
.rt  
A mirror of two or more devices. Data is replicated in an identical fashion across all components of
a mirror. A mirror with \fIN\fR disks of size \fIX\fR can hold \fIX\fR bytes and can withstand (\fIN-1\fR)
devices failing before data integrity is compromised.
.RE

.sp
.ne 2
.mk
.na
\fB\fBraidz1\fR\fR
.ad
.br
.na
\fB\fBraidz2\fR\fR
.ad
.br
.na
\fB\fBraidz3\fR\fR
.ad
.RS 10n
.rt  
A variation on \fBRAID-5\fR that allows for better distribution of parity and eliminates the
"\fBRAID-5\fR write hole" (in which data and parity become inconsistent after a power loss).
Data and parity is striped across all disks within a \fBraidz\fR group.
.sp
A \fBraidz\fR group can have single, double or triple parity, meaning that the \fBraidz\fR group
can sustain one, two or three failures, respectively, without losing any data. The \fBraidz1\fR
\fBvdev\fR type specifies a single-parity \fBraidz\fR group; the \fBraidz2\fR \fBvdev\fR type
specifies a double-parity \fBraidz\fR group; and the \fBraidz3\fR \fBvdev\fR type specifies a
triple-parity \fBraidz\fR group.
.sp
A \fBraidz\fR group with \fIN\fR disks of size \fIX\fR with \fIP\fR parity disks can hold
approximately (\fIN-P\fR)*\fIX\fR bytes and can withstand \fIP\fR device(s) failing before
data integrity is compromised. The minimum number of devices in a \fBraidz\fR group is one
more than the number of parity disks. The recommended number is between 3 and 9 for optimal performance.
.RE

.sp
.ne 2
.na
\fB\fBlog\fR\fR
.ad
.RS 10n
A separate-intent log device. If more than one log device is specified, then
writes are load-balanced between devices. Log devices can be mirrored. However,
\fBraidz\fR \fBvdev\fR types are not supported for the intent log. For more
information, see the "Intent Log" section.
.RE

.sp
.ne 2
.mk
.na
\fB\fBcache\fR\fR
.ad
.RS 10n
.rt  
A device used to cache storage pool data. A cache device cannot be configured as a mirror or raidz group. For more information, see the "Cache Devices" section.
.RE

.sp
.LP
Virtual devices cannot be nested, so a \fBmirror\fR or \fBraidz\fR virtual device can only contain disks. Mirrors of mirrors (or other combinations) are not allowed.
.sp
.LP
A pool can have any number of virtual devices at the top of the configuration (known as "root vdevs"). Data is dynamically distributed across all top-level devices to balance data among devices. As new virtual devices are added, \fBZFS\fR automatically places data
on the newly available devices.
.sp
.LP
Virtual devices are specified one at a time on the command line, separated by whitespace. The keywords "\fBmirror\fR" and "\fBraidz\fR" are used to distinguish where a group ends and another begins. For example, the following creates two root vdevs, each a mirror of two disks:
.sp
.in +2
.nf
# \fBzpool create mypool mirror /dev/disk1 /dev/disk2 mirror /dev/disk3 /dev/disk4\fR
.fi
.in -2
.sp
.\"
.\" = = = = = = = = = = DEVICE FAILURE = = = = = = = = = =
.\"
.SS "Device Failure and Recovery"
.sp
.LP
\fBZFS\fR supports a rich set of mechanisms for handling device failure and data corruption. All
metadata and data is checksummed, and \fBZFS\fR automatically repairs bad data from a good copy
when corruption is detected.
.sp
.LP
In order to take advantage of these features, a pool must make use of some form of redundancy,
using either \fBmirrored\fR or \fBraidz\fR groups. While \fBZFS\fR supports running in a non-redundant
configuration, where each root vdev is simply a disk, this is strongly discouraged. A single case
of bit corruption can render some or all of your data unavailable.
.sp
.LP
A pool's health status is described by one of three states: online, degraded, or faulted. An online
pool has all devices operating normally. A degraded pool is one in which one or more devices have
failed, but the data is still available due to a redundant configuration. A faulted pool has corrupted
metadata, or one or more faulted devices, and insufficient replicas to continue functioning.
.sp
.LP
The health of the top-level vdev, such as \fBmirror\fR or \fBraidz\fR device, is potentially impacted by the
state of its associated vdevs, or component devices. A top-level vdev or component device is in
one of the following states:
.sp
.ne 2
.mk
.na
\fB\fBDEGRADED\fR\fR
.ad
.RS 12n
.rt  
One or more top-level vdevs is in the degraded state because one or more component devices are
offline. Sufficient replicas exist to continue functioning.
.sp
One or more component devices is in the degraded or faulted state, but sufficient replicas exist
to continue functioning. The underlying conditions are as follows:
.RS +4
.TP
.ie t \(bu
.el o
The number of checksum errors exceeds acceptable levels and the device is degraded as an indication that something may be wrong. \fBZFS\fR continues to use the device as necessary.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The number of I/O errors exceeds acceptable levels. The device could not be marked as faulted because there are insufficient replicas to continue functioning.
.RE
.RE

.sp
.ne 2
.mk
.na
\fB\fBFAULTED\fR\fR
.ad
.RS 12n
.rt  
One or more top-level vdevs is in the faulted state because one or more component devices are offline.
Insufficient replicas exist to continue functioning.
.sp
One or more component devices is in the faulted state, and insufficient replicas exist to continue
functioning. The underlying conditions are as follows:
.RS +4
.TP
.ie t \(bu
.el o
The device could be opened, but the contents did not match expected values.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The number of I/O errors exceeds acceptable levels and the device is faulted to prevent further use of the device.
.RE
.RE

.sp
.ne 2
.mk
.na
\fB\fBOFFLINE\fR\fR
.ad
.RS 12n
.rt  
The device was explicitly taken offline by the "\fBzpool offline\fR" command.
.RE

.sp
.ne 2
.mk
.na
\fB\fBONLINE\fR\fR
.ad
.RS 12n
.rt  
The device is online and functioning.
.RE

.sp
.ne 2
.mk
.na
\fB\fBREMOVED\fR\fR
.ad
.RS 12n
.rt  
The device was physically removed while the system was running. Device removal
detection is hardware-dependent and may not be supported on all platforms.
.RE

.sp
.ne 2
.mk
.na
\fB\fBUNAVAIL\fR\fR
.ad
.RS 12n
.rt  
The device could not be opened. If a pool is imported when a device was
unavailable, then the device will be identified by a unique identifier instead
of its path since the path was never correct in the first place.
.RE

.sp
.LP
If a device is removed and later reattached to the system, \fBZFS\fR attempts to put the
device online automatically.
.\"
.\" = = = = = = = = = = PROPERTIES = = = = = = = = = =
.\"
.SS "Properties"
.sp
.LP
Each pool has several properties associated with it. Some properties are read-only statistics
while others are configurable and change the behavior of the pool. The following are read-only
properties:

.sp
.ne 2
.mk
.na
\fB\fBallocated\fR\fR
.ad
.RS 12n
.rt  
Amount of storage space within the pool that has been physically allocated.
.RE

.sp
.ne 2
.mk
.na
\fB\fBcapacity\fR\fR
.ad
.RS 12n
.rt  
Percentage of pool space used. This property can also be referred to by its shortened column name, "cap".
.RE

.sp
.ne 2
.mk
.na
\fBfree\fR
.ad
.RS 12n
.rt  
Number of blocks within the pool that are not allocated.
.RE

.sp
.ne 2
.mk
.na
\fB\fBguid\fR\fR
.ad
.RS 12n
.rt  
A unique identifier for the pool.
.RE

.sp
.ne 2
.mk
.na
\fB\fBhealth\fR\fR
.ad
.RS 12n
.rt
The current health of the pool. Health can be "\fBONLINE\fR", "\fBDEGRADED\fR",
"\fBFAULTED\fR", " \fBOFFLINE\fR", "\fBREMOVED\fR", or "\fBUNAVAIL\fR".
.RE

.sp
.ne 2
.mk
.na
\fB\fBsize\fR\fR
.ad
.RS 12n
.rt  
Total size of the storage pool.
.RE
.LP
Note: The space usage properties report actual physical space available to the storage pool. The
physical space can be different from the total amount of space that any contained datasets can
actually use. The amount of space used in a raidz configuration depends on the characteristics
of the data being written. In addition, ZFS reserves some space for internal accounting that the
zfs(8) command takes into account, but the zpool command does not. For non-full pools of a reasonable
size, these effects should be invisible. For small pools, or pools that are close to being completely
full, these discrepancies may become more noticeable.

.sp
.ne 2
.mk
.na
\fBversion\fR
.ad
.RS 12n
.rt
The current on-disk version of the pool.
.RE

.sp
.LP
The following configuration property can only be set at creation time:
.sp
.ne 2
.mk
.na
\fB\fBashift\fR\fR
.ad
.RS 8n
.rt
The \fBzfs\fR vdev sector size exponent, to the power of 2 (internally referred
to as "\fBashift\fR"). All ZFS I/O operations will be aligned to the size
boundary described by the ashift value. Additionally, the minimum disk write
size will be constrained by ashift, so this represents a space versus performance
trade-off.
.sp
The typical case for setting this property is when the underlying disks have
native 4KiB sectors but report 512B sectors to the OS (this is known as Advanced
Format 512e).  This incorrect sector reporting will cause a ZFS ashift
misconfiguration resulting in unsatisfactory disk performance. To avoid an
improper ashift in this case, set \fBashift=12\fR (i.e. 2^12 = 4096) as a
configuration hint to the \fBzpool create\fR command. Example 11 in the
"Examples" section demonstrates how to use the \fBashift\fR property. 
.LP
For optimal performance, the effective pool sector size (as represented by the
ashift value) should be greater than or equal to the native sector size of the
underlying disks.
.RE

.sp
.LP
The following property can be set at creation time and import time:
.sp
.ne 2
.mk
.na
\fB\fBaltroot\fR\fR
.ad
.RS 10n
.rt  
Alternate root directory. If set, this directory is prepended to any mount points within the pool.
This can be used when examining an unknown pool where the mount points cannot be trusted, or in an
alternate boot environment, where the typical paths are not valid. altroot is not a persistent
property. It is valid only while the system is up. Setting altroot defaults to using cachefile=none, 
though this may be overridden using an explicit setting.
.RE

.sp
.LP
The following property can be set at import time:
.sp
.ne 2
.mk
.na
\fB\fBreadonly\fR=on|off\fR
.ad
.RS 19n
.rt
Controls whether the pool can be modified. When enabled, any synchronous data that exists only on
the intent log will not be accessible until the pool is re-imported in read-write mode.
.RE

.sp
.LP
The following properties can be set at creation time and import time, and later changed with the zpool set command:
.sp
.ne 2
.mk
.na
\fB\fBautoexpand\fR=on|off\fR
.ad
.RS 20n
.rt
Controls automatic pool expansion when the underlying LUN is grown. If set to \fBon\fR, the pool will be resized according 
to the size of the expanded device. If the device is part of a mirror or raidz then all devices within that mirror/raidz 
group must be expanded before the new space is made available to the pool. The default behavior is \fBoff\fR. This property 
can also be referred to by its shortened column name, \fBexpand\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBfailmode\fR=wait | continue\fR
.ad
.sp .6
.RS 4n
Controls the system behavior in the event of catastrophic pool failure. This condition is typically a result of a loss of connectivity to the underlying storage device(s) or a failure of all devices within the pool. The behavior of such an event is determined as follows:
.sp
.ne 2
.mk
.na
\fB\fBwait\fR\fR
.ad
.RS 12n
.rt  
Blocks all \fBI/O\fR access until the device connectivity is recovered and the errors are cleared.
.RE

.sp
.ne 2
.mk
.na
\fB\fBcontinue\fR\fR
.ad
.RS 12n
.rt  
Returns \fBEIO\fR to any new write \fBI/O\fR requests but allows reads to any of the remaining healthy devices. Any write requests that have yet to be committed to disk would be blocked.
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fBlistsnaps\fR=on|off\fR
.ad
.RS 20n
.rt
Controls whether information about snapshots associated with this pool is output when "\fBzfs list\fR" is run without
the \fB-t\fRoption. The default value is "off".
.RE

.\"
.\" = = = = = = = = = = SUBCOMMANDS = = = = = = = = = =
.\"
.SS "Subcommands"
.sp
.LP
All subcommands that modify state are logged persistently to the pool in their original form.
.sp
.LP
The \fBzpool\fR command provides subcommands to create and destroy storage pools, add capacity to storage pools,
and provide information about the storage pools. The following subcommands are supported:
.\"
.\" = = = = = = = = = = ZPOOL ? = = = = = = = = = =
.sp
.ne 2
.mk
.na
\fB\fBzpool\fR \fB-?\fR\fR
.ad
.sp .6
.RS 4n
Displays a help message.
.RE
.\"
.\" = = = = = = = = = = ZPOOL ADD = = = = = = = = = =
.sp
.ne 2
.mk
.na
\fB\fBzpool add\fR [\fB-fn\fR] \fIpool\fR \fIvdev\fR ...\fR
.ad
.sp .6
.RS 4n
Adds the specified virtual devices to the given pool. The \fIvdev\fR specification is described
in the "Virtual Devices" section. The behavior of the \fB-f\fR option, and the device checks
performed are described in the "zpool create"
subcommand.
.sp
.ne 2
.mk
.na
\fB\fB-f\fR\fR
.ad
.RS 6n
.rt  
Forces use of \fBvdev\fRs, even if they appear in use or specify a conflicting replication level. Not all devices can be overridden in this manner.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-n\fR\fR
.ad
.RS 6n
.rt  
Displays the configuration that would be used without actually adding the \fBvdev\fRs. The actual pool creation can still fail due to insufficient privileges or device sharing.
.RE
.RE
.\"
.\" = = = = = = = = = = ZPOOL ATTACH = = = = = = = = = =
.sp
.ne 2
.mk
.na
\fB\fBzpool attach\fR [\fB-f\fR] \fIpool\fR \fIdevice\fR \fInew_device\fR\fR
.ad
.sp .6
.RS 4n
Attaches \fInew_device\fR to an existing \fBzpool\fR device. The existing device cannot be part of
a \fBraidz\fR configuration. If \fIdevice\fR is not currently part of a mirrored configuration,
\fIdevice\fR automatically transforms into a two-way mirror of \fIdevice\fR and \fInew_device\fR.
If \fIdevice\fR is part of a two-way mirror, attaching \fInew_device\fR creates a three-way mirror,
and so on. In either case, \fInew_device\fR begins to resilver immediately.
.sp
.ne 2
.mk
.na
\fB\fB-f\fR\fR
.ad
.RS 6n
.rt  
Forces use of \fInew_device\fR, even if its appears to be in use. Not all devices can be overridden in this manner.
.RE

.RE
.\"
.\" = = = = = = = = = = ZPOOL CLEAR = = = = = = = = = =
.sp
.ne 2
.mk
.na
\fB\fBzpool clear\fR [\fB-F\fR[\fB-n\fR]] \fIpool\fR [\fIdevice\fR] ...\fR
.ad
.sp .6
.RS 4n
Clears device errors in a pool. If no arguments are specified, all device errors within the pool are cleared.
If one or more devices is specified, only those errors associated with the specified device or devices are cleared.
.sp
.ne 2
.mk
.na
\fB\fB-F\fR\fR
.ad
.RS 6n
.rt  
Initiates recovery mode for an unopenable pool. Attempts to discard the last few transactions in the pool to return
it to an openable state. Not all damaged pools can be recovered by using this option. If successful, the data from
the discarded transactions is irretrievably lost.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-n\fR\fR
.ad
.RS 6n
.rt  
Used in combination with the -F flag. Check whether discarding transactions would make the pool openable, but do not
actually discard any transactions.
.RE
.RE
.\"
.\" = = = = = = = = = = ZPOOL CREATE = = = = = = = = = =
.sp
.ne 2
.mk
.na
\fBzpool create\fR [\fB-fn\fR] [\fB-o\fR \fIzpool-property=value\fR]... [\fB-O\fR \fIzfs-property=value\fR]...
[\fB-m\fR \fImountpoint\fR] [\fB-R\fR \fIroot\fR] \fIpool\fR \fIvdev\fR ...
.ad
.sp .6
.RS 4n
Creates a new storage pool containing the virtual devices specified on the command line. The pool name must begin
with a letter, and can only contain alphanumeric characters as well as underscore ("_"), dash ("-"), and period
("."). The pool names "mirror", "raidz", "spare" and "log" are reserved, as are names beginning with the pattern
"c[0-9]". The \fBvdev\fR specification is described in the "Virtual Devices" section.
.sp
The command verifies that each device specified is accessible and not currently in use by another subsystem. There
are some uses, such as being currently mounted,  that prevents a device from ever being used by \fBZFS\fR. Other
uses, such as having a preexisting \fBHFS+\fR file system, can be overridden with the \fB-f\fR option.
.sp
The command also checks that the replication strategy for the pool is consistent. An attempt to combine redundant
and non-redundant storage in a single pool results in an error unless \fB-f\fR is specified. The use of differently
sized devices within a single \fBraidz\fR or \fBmirror\fR group is also flagged as an error unless \fB-f\fR is specified.
.sp
Unless the \fB-R\fR option is specified, the default mount point is "/\fIVolumes/pool\fR". The mount point must not
exist or must be empty, or else the root dataset cannot be mounted. This can be overridden with the \fB-m\fR option.
.sp
.ne 2
.mk
.na
\fB\fB-f\fR\fR
.ad
.RS 19n
.rt  
Forces use of \fBvdev\fRs, even if they appear in use or specify a conflicting replication level. Not all devices
can be overridden in this manner.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-n\fR\fR
.ad
.RS 19n
.rt  
Displays the configuration that would be used without actually creating the pool. The actual pool creation can still
fail due to insufficient privileges or device sharing.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-o\fR\fR \fIproperty\fR=\fIvalue\fR
.ad
.RS 19n
.rt  
Sets the given pool propertie(s). See the "Properties" section above for a list of valid properties that can be set.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-O\fR\fR \fIproperty\fR=\fIvalue\fR
.ad
.RS 19n
.rt  
Sets the given filesystem propertie(s) in the root file system of the pool. See the "Properties"
section of zfs(8) for a list of valid properties that can be set.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-R\fR \fIroot\fR\fR
.ad
.RS 19n
.rt  
Creates the pool with an alternate \fIroot\fR. Equivalent to "-o cachefile=none,altroot=root"
.RE

.sp
.ne 2
.mk
.na
\fB\fB-m\fR \fImountpoint\fR\fR
.ad
.RS 19n
.rt  
Sets the mount point for the root dataset. The default mount point is "/Volumes/pool" or
"altroot/pool" if altroot is specified. The mount point must be an absolute path or "none".
For more information on dataset mount points, see zfs(8).
.RE
.RE
.\"
.\" = = = = = = = = = = ZPOOL DESTROY = = = = = = = = = =
.sp
.ne 2
.mk
.na
\fB\fBzpool destroy\fR [\fB-f\fR] \fIpool\fR\fR
.ad
.sp .6
.RS 4n
Destroys the given pool, freeing up any devices for other use. This command attempts to
unmount any active datasets before destroying the pool.
.sp
.ne 2
.mk
.na
\fB\fB-f\fR\fR
.ad
.RS 6n
.rt  
Forces any active datasets contained within the pool to be unmounted.
.RE
.RE
.\"
.\" = = = = = = = = = = ZPOOL DETACH = = = = = = = = = =
.sp
.ne 2
.mk
.na
\fB\fBzpool detach\fR \fIpool\fR \fIdevice\fR\fR
.ad
.sp .6
.RS 4n
Detaches \fIdevice\fR from a mirror. The operation is refused if there are no other valid replicas of the data.
.RE
.RE
.\"
.\" = = = = = = = = = = ZPOOL EXPORT = = = = = = = = = =
.sp
.ne 2
.mk
.na
\fB\fBzpool export\fR [\fB-f\fR] \fIpool\fR ...\fR
.ad
.sp .6
.RS 4n
Exports the given pools from the system. All devices are marked as exported, but are still considered
in use by other subsystems. The devices can be moved between systems (even those of different endianness)
and imported as long as a sufficient number of devices are present.
.sp
Before exporting the pool, all datasets within the pool are unmounted.
.sp
.ne 2
.mk
.na
\fB\fB-f\fR\fR
.ad
.RS 6n
.rt  
Forcefully unmount all datasets, using the "\fBunmount -f\fR" command.
.sp
This command will forcefully export the pool.
.RE
.RE
.\"
.\" = = = = = = = = = = ZPOOL GET = = = = = = = = = =
.sp
.ne 2
.mk
.na
\fB\fBzpool get\fR \fIall\fR | \fIproperty\fR[,...] \fIpool\fR\fR ...
.ad
.sp .6
.RS 4n
Retrieves the given list of properties (or all properties if "all" is used) for the
specified storage pool(s). These properties are displayed with the following fields:
.sp
.in +4
.nf
name            Name of storage pool
.in +2
property        Property name
value           Property value
source          Property source, either 'default' or 'local'.
.fi
.in -6
.sp

See the "Properties" section for more information on the available pool properties.
.RE
.\"
.\" = = = = = = = = = = ZPOOL HISTORY = = = = = = = = = =
.sp
.ne 2
.mk
.na
\fB\fBzpool history\fR [\fB-il\fR] [\fIpool\fR] ...\fR
.ad
.sp .6
.RS 4n
Displays the command history of the specified pools (or all pools if no pool is specified).
.sp
.ne 2
.mk
.na
\fB\fB-i\fR\fR
.ad
.RS 4n
.rt  
Displays internally logged ZFS events in addition to user initiated events.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-l\fR\fR
.ad
.RS 4n
.rt  
Displays log records in long format, which in addition to standard format includes,
the user name and the hostname for the operation that was performed.
.RE
.RE
.\"
.\" = = = = = = = = = = ZPOOL IMPORT = = = = = = = = = =
.sp
.ne 2
.mk
.na
\fB\fBzpool import\fR [\fB-d\fR \fIdir\fR] [\fB-D\fR]\fR
.ad
.sp .6
.RS 4n
Lists pools available to import. If the \fB-d\fR option is not specified, this command searches for
devices in "/dev/dsk/". The \fB-d\fR option can be specified multiple times, and all directories are
searched. If the device appears to be part of an exported pool, this command displays a summary of
the pool with the name of the pool, a numeric identifier, as well as the \fIvdev\fR layout and
current health of the device for each device. Destroyed pools, pools that were previously destroyed
with the "\fB-zpool destroy\fR" command, are not listed unless the \fB-D\fR option is specified. 
.sp
The numeric identifier is unique, and can be used instead of the pool name when multiple exported
pools of the same name are available.
.sp
.ne 2
.mk
.na
\fB\fB-d\fR \fIdir\fR\fR
.ad
.RS 10n
.rt  
Searches for devices in \fIdir\fR. The \fB-d\fR option can be specified multiple times.
.RE
.sp
.ne 2
.mk
.na
\fB\fB-D\fR\fR
.ad
.RS 10n
.rt  
Lists destroyed pools only.
.RE
.RE
.\"
.\" = = = = = = = = = = ZPOOL IMPORT (ALL) = = = = = = = = = =
.sp
.ne 2
.mk
.na
\fB\fBzpool import\fR [\fB-o\fR \fImntopts\fR] [\fB-o\fR \fIproperty=value\fR] ... [\fB-d\fR \fIdir\fR]
[\fB-D\fR] [\fB-f\fR] [\fB-m\fR] [\fB-N\fR] [\fB-R\fR \fIroot\fR] [\fB-F\fR [\fB-n\fR]] -a\fR
.ad
.sp .6
.RS 4n
Imports all pools found in the search directories. Identical to the previous command, except
that all pools with a sufficient number of devices available are imported. Destroyed pools,
pools that were previously destroyed with the "\fB-zpool destroy\fR" command, will not be
imported unless the \fB-D\fR option is specified.
.sp
.ne 2
.mk
.na
\fB\fB-o\fR \fImntopts\fR\fR
.ad
.RS 19n
.rt  
Comma-separated list of mount options to use when mounting datasets within the pool. See zfs(8) for a description of dataset properties and mount options.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-o\fR \fIproperty=value\fR\fR
.ad
.RS 19n
.rt  
Sets the specified property on the imported pool. See the "Properties" section for more information on the available pool properties.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-d\fR \fIdir\fR\fR
.ad
.RS 19n
.rt  
Searches for devices in \fIdir\fR. The \fB-d\fR option can be specified multiple times.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-D\fR\fR
.ad
.RS 19n
.rt  
Imports destroyed pools only. The \fB-f\fR option is also required.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-f\fR\fR
.ad
.RS 19n
.rt  
Forces import, even if the pool appears to be potentially active.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-F\fR\fR
.ad
.RS 19n
.rt  
Recovery mode for a non-importable pool. Attempt to return the pool to an importable state
by discarding the last few transactions. Not all damaged pools can be recovered by using
this option. If successful, the data from the discarded transactions is irretrievably lost.
This option is ignored if the pool is importable or already imported.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-a\fR\fR
.ad
.RS 19n
.rt  
Searches for and imports all pools found.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-m\fR\fR
.ad
.RS 19n
.rt  
Allows a pool to import when there is a missing log device.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-R\fR \fIroot\fR\fR
.ad
.RS 19n
.rt  
Sets the "\fBcachefile\fR" property to "\fBnone\fR" and the "\fIaltroot\fR" property to "\fIroot\fR".
.RE

.sp
.ne 2
.mk
.na
\fB\fB-N\fR\fR
.ad
.RS 19n
.rt  
Import the pool without mounting any file systems.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-n\fR\fR
.ad
.RS 19n
.rt  
Used with the \fB-F\fR recovery option. Determines whether a non-importable pool can be
made importable again, but does not actually perform the pool recovery. For more details
about pool recovery mode, see the \fB-F\fR option, above.
.RE
.RE
.\"
.\" = = = = = = = = = = ZPOOL IMPORT (SPECIFIC) = = = = = = = = = =
.sp
.ne 2
.mk
.na
\fB\fBzpool import\fR [\fB-o\fR \fImntopts\fR] [\fB-o\fR \fIproperty=value\fR] ...
[\fB-d\fR \fIdir\fR] [\fB-D\fR] [\fB-f\fR] [\fB-m\fR] [\fB-R\fR \fIroot\fR]
[\fB-F\fR [\fB-n\fR]] \fIpool\fR | \fIguid\fR [\fInewpool\fR]\fR
.ad
.sp .6
.RS 4n
Imports a specific pool. A pool can be identified by its name or the unique numeric identifier.
If \fInewpool\fR is specified, the pool is imported using the name \fInewpool\fR. Otherwise,
it is imported with the same name as its exported name.
.sp
If a device is removed from a system without running "\fBzpool export\fR" first, the device
appears as potentially active. It cannot be determined if this was a failed export, or whether
the device is really in use from another host. To import a pool in this state, the \fB-f\fR
option is required.
.sp
.ne 2
.mk
.na
\fB\fB-o\fR \fImntopts\fR\fR
.ad
.RS 19n
.rt  
Comma-separated list of mount options to use when mounting datasets within the pool. See zfs(8) for a description of dataset properties and mount options.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-o\fR \fIproperty=value\fR\fR
.ad
.RS 19n
.rt  
Sets the specified property on the imported pool. See the "Properties" section for more information on the available pool properties.
.RE
.sp
.ne 2
.mk
.na
\fB\fB-d\fR \fIdir\fR\fR
.ad
.RS 19n
.rt  
Searches for devices in \fIdir\fR. The \fB-d\fR option can be specified multiple times.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-D\fR\fR
.ad
.RS 19n
.rt  
Imports destroyed pool. The \fB-f\fR option is also required.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-f\fR\fR
.ad
.RS 19n
.rt  
Forces import, even if the pool appears to be potentially active.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-F\fR\fR
.ad
.RS 19n
.rt  
Recovery mode for a non-importable pool. Attempt to return the pool to an importable state
by discarding the last few transactions. Not all damaged pools can be recovered by using
this option. If successful, the data from the discarded transactions is irretrievably lost.
This option is ignored if the pool is importable or already imported.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-R\fR \fIroot\fR\fR
.ad
.RS 19n
.rt  
Sets the "cachefile" property to "none" and the "altroot" property to "root".
.RE

.sp
.ne 2
.mk
.na
\fB\fB-n\fR\fR
.ad
.RS 19n
.rt  
Used with the \fB-F\fR recovery option. Determines whether a non-importable pool can be
made importable again, but does not actually perform the pool recovery. For more details
about pool recovery mode, see the \fB-F\fR option, above.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-m\fR\fR
.ad
.RS 19n
.rt  
Allows a pool to import when there is a missing log device.
.RE
.RE
.\"
.\" = = = = = = = = = = ZPOOL IOSTAT = = = = = = = = = =
.sp
.ne 2
.mk
.na
\fB\fBzpool iostat\fR [\fB-T\fR \fBd|u\fR] [\fB-v\fR] [\fIpool\fR] ... [\fIinterval\fR [\fIcount\fR]]\fR
.ad
.sp .6
.RS 4n
Displays \fBI/O\fR statistics for the given pools. When given an interval, the statistics are printed every \fIinterval\fR seconds until \fBCtrl-C\fR is pressed. If no \fIpools\fR are specified, statistics for
every pool in the system is shown. If \fIcount\fR is specified, the command exits after \fIcount\fR reports are printed.
.sp
.ne 2
.mk
.na
\fB\fB-T d|u\fR\fR
.ad
.RS 8n
.rt  
Display a time stamp.
.sp
Specify \fBd\fR for standard date format as in date(1). Specify \fBu\fR for a printed representation of the internal representation of time.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-v\fR\fR
.ad
.RS 8n
.rt  
Verbose statistics. Reports usage statistics for individual \fIvdevs\fR within the pool, in addition to the pool-wide statistics.
.RE
.RE
.\"
.\" = = = = = = = = = = ZPOOL LIST = = = = = = = = = =
.sp
.ne 2
.mk
.na
\fB\fBzpool list\fR [\fB-H\fR] [\fB-o\fR \fIprops\fR[,...]] [\fB-T d|u\fR] [\fIpool\fR] ... [\fIinterval\fR [\fIcount\fR]]\fR
.ad
.sp .6
.RS 4n
Lists the given pools along with a health status and space usage. When given no arguments, all pools in the system are listed.
.sp
When given an interval, the status and space usage are displayed every \fIinterval\fR seconds until
\fBCtrl-C\fR is entered. If \fIcount\fR is specified, the command exits after \fIcount\fR reports are displayed.
.sp
.ne 2
.mk
.na
\fB\fB-H\fR\fR
.ad
.RS 10n
.rt  
Scripted mode. Do not display headers, and separate fields by a single tab instead of arbitrary space.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-o\fR \fIprops\fR\fR
.ad
.RS 10n
.rt  
Comma-separated list of properties to display. See the "Properties" section for a list of
valid properties. The default list is name, size, allocated, free, capacity, health and altroot.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-T d|u\fR\fR
.ad
.RS 10n
.rt  
Display a time stamp.
.sp
Specify \fBd\fR for standard date format as in date(1). Specify \fBu\fR for a printed representation of the internal representation of time.
.RE
.RE
.\"
.\" = = = = = = = = = = ZPOOL OFFLINE = = = = = = = = = =
.sp
.ne 2
.mk
.na
\fB\fBzpool offline\fR [\fB-t\fR] \fIpool\fR \fIdevice\fR ...\fR
.ad
.sp .6
.RS 4n
Takes the specified physical device offline. While the \fIdevice\fR is offline, no attempt is made to read or write to the device.
.sp
.ne 2
.mk
.na
\fB\fB-t\fR\fR
.ad
.RS 5n
.rt  
Temporary. Upon reboot, the specified physical device reverts to its previous state.
.RE
.RE
.\"
.\" = = = = = = = = = = ZPOOL ONLINE = = = = = = = = = =
.sp
.ne 2
.mk
.na
\fB\fBzpool online\fR [\fB-e\fR] \fIpool\fR \fIdevice\fR ...\fR
.ad
.sp .6
.RS 4n
Brings the specified physical device online.
.sp
.ne 2
.mk
.na
\fB\fB-e\fR\fR
.ad
.RS 6n
.rt  
Expand the device to use all available space. If the device is part of a mirror or raidz then all devices must be expanded before the new space will become available to the pool.
.RE
.RE
.\"
.\" = = = = = = = = = = ZPOOL REMOVE = = = = = = = = = =
.sp
.ne 2
.mk
.na
\fB\fBzpool remove\fR \fIpool\fR \fIdevice\fR\fR
.ad
.sp .6
.RS 4n
Removes the specified device from the pool. This command currently only supports
removing cache and log devices. A mirrored log device can be removed by specifying the top-level
mirror for the log. Non-log devices that are part of a mirrored configuration can be removed
using the "zpool detach" command. Non-redundant and raidz devices cannot be removed from a pool.
.RE
.RE
.\"
.\" = = = = = = = = = = ZPOOL REPLACE = = = = = = = = = =
.sp
.ne 2
.mk
.na
\fB\fBzpool replace\fR [\fB-f\fR] \fIpool\fR \fIold_device\fR [\fInew_device\fR]\fR
.ad
.sp .6
.RS 4n
Replaces \fIold_device\fR with \fInew_device\fR. This is equivalent to attaching \fInew_device\fR, waiting for it to resilver, and then detaching \fIold_device\fR.
.sp
The size of \fInew_device\fR must be greater than or equal to the minimum size of all the devices in a mirror or \fBraidz\fR configuration.
.sp
\fInew_device\fR is required if the pool is not redundant. If \fInew_device\fR is not specified, it defaults to \fIold_device\fR. This form of replacement is useful after an existing disk has failed and has been physically replaced. In this case, the new disk may have the same \fB/dev/dsk\fR path
as the old device, even though it is actually a different disk. \fBZFS\fR recognizes this.
.sp
In zpool status output, the \fIold_device\fR is shown under the word replacing with the string
/old appended to it. Once the resilver completes, both the replacing and the \fIold_device\fR
are automatically removed. If the new device fails before the resilver completes and a third
device is installed in its place, then both failed devices will show up with /old appended,
and the resilver starts over again. After the resilver completes, both /old devices are removed
along with the word replacing.
.sp
.ne 2
.mk
.na
\fB\fB-f\fR\fR
.ad
.RS 6n
.rt  
Forces use of \fInew_device\fR, even if its appears to be in use. Not all devices can be overridden in this manner.
.RE
.RE
.\"
.\" = = = = = = = = = = ZPOOL SCRUB = = = = = = = = = =
.sp
.ne 2
.mk
.na
\fB\fBzpool scrub\fR [\fB-s\fR] \fIpool\fR ...\fR
.ad
.sp .6
.RS 4n
Begins a scrub. The scrub examines all data in the specified pools to verify that it checksums
correctly. For replicated (\fBmirror\fR or \fBraidz\fR) devices, \fBZFS\fR automatically repairs any
damage discovered during the scrub. The "\fBzpool status\fR" command reports the progress of the
scrub and summarizes the results of the scrub upon completion.
.sp
Scrubbing and resilvering are very similar operations. The difference is that resilvering only
examines data that \fBZFS\fR knows to be out of date (for example, when attaching a new device
to a mirror or replacing an existing device), whereas scrubbing examines all data to discover
silent errors due to hardware faults or disk failure.
.sp
Because scrubbing and resilvering are \fBI/O\fR-intensive operations, \fBZFS\fR only allows one
at a time. If a scrub is already in progress, the "\fBzpool scrub\fR" command terminates it and
starts a new scrub. If a resilver is in progress, \fBZFS\fR does not allow a scrub to be started
until the resilver completes.
.sp
.ne 2
.mk
.na
\fB\fB-s\fR\fR
.ad
.RS 6n
.rt  
Stop scrubbing.
.RE
.RE
.\"
.\" = = = = = = = = = = ZPOOL SET = = = = = = = = = =
.sp
.ne 2
.mk
.na
\fB\fBzpool set\fR \fB property=value\fR \fIpool\fR\fR
.ad
.sp .6
.RS 4n
Sets the given property on the specified pool. See the "Properties" section for more information on what properties can be set and acceptable values.
.RE
.\"
.\" = = = = = = = = = = ZPOOL SPLIT = = = = = = = = = =
.sp
.ne 2
.mk
.na
\fB\fBzpool split\fR [\fB-R\fR \fIaltroot\fR] [\fB-n\fR] [\fB-o\fR \fImntopts\fR] [\fB-o\fR \fIproperty=value\fR] \fIpool\fR \fInewpool\fR [\fIdevice\fR ...]\fR
.ad
.sp .6
.RS 4n
Splits off one disk from each mirrored top-level vdev in a pool and creates a new pool from
the split-off disks. The original pool must be made up of one or more mirrors and must not
be in the process of resilvering. The split subcommand chooses the last device in each mirror
vdev unless overridden by a device specification on the command line.
.sp
When using a \fIdevice\fR argument, split includes the specified device(s) in a new pool and,
should any devices remain unspecified, assigns the last device in each mirror vdev to that pool,
as it does normally. If you are uncertain about the outcome of a split command, use the -n
("dry-run") option to ensure your command will have the effect you intend.
.sp
.ne 2
.mk
.na
\fB\fB-R altroot\fR\fR
.ad
.RS 19n
.rt  
Automatically import the newly created pool after splitting, using the specified \fIaltroot\fR
parameter for the new pool's alternate root. See the altroot description in the "Properties" section, above.
.RE
.sp
.ne 2
.mk
.na
\fB\fB-n\fR\fR
.ad
.RS 19n
.rt  
Displays the configuration that would be created without actually splitting the pool. The actual pool split could still fail due to insufficient privileges or device status.
.RE
.sp
.ne 2
.mk
.na
\fB\fB-o mntopts\fR\fR
.ad
.RS 19n
.rt  
Comma-separated list of mount options to use when mounting datasets within the pool. See zfs(8)
for a description of dataset properties and mount options. Valid only in conjunction with the \fB-R\fR option.
.RE
.sp
.ne 2
.mk
.na
\fB\fB-o property=value\fR\fR
.ad
.RS 19n
.rt  
Sets the specified property on the new pool. See the "Properties" section, above, for more information on the available pool properties.
.RE
.RE
.\"
.\" = = = = = = = = = = ZPOOL STATUS = = = = = = = = = =
.sp
.ne 2
.mk
.na
\fB\fBzpool status\fR [\fB-xv\fR] [\fB-T d|u\fR] [\fIpool\fR] ... [\fIinterval\fR [\fIcount\fR]]\fR
.ad
.sp .6
.RS 4n
Displays the detailed health status for the given pools. If no \fIpool\fR is specified, then the
status of each pool in the system is displayed.
.sp
When given an interval, the status and space usage are displayed every \fIinterval\fR seconds
until \fBCtrl-C\fR is entered. If \fIcount\fR is specified, the command exits after \fIcount\fR
reports are displayed.
.sp
If a scrub or resilver is in progress, this command reports the percentage done and the estimated
time to completion. Both of these are only approximate, because the amount of data in the pool and
the other workloads on the system can change.
.sp
.ne 2
.mk
.na
\fB\fB-x\fR\fR
.ad
.RS 6n
.rt  
Only display status for pools that are exhibiting errors or are otherwise unavailable.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-v\fR\fR
.ad
.RS 6n
.rt  
Displays verbose data error information, printing out a complete list of all data errors
since the last complete pool scrub.
.RE
.sp
.ne 2
.mk
.na
\fB\fB-T d|u\fR\fR
.ad
.RS 10n
.rt  
Display a time stamp.
.sp
Specify \fBd\fR for standard date format as in date(1). Specify \fBu\fR for a printed representation of the internal representation of time.
.RE
.RE
.\"
.\" = = = = = = = = = = ZPOOL UPGRADE = = = = = = = = = =
.sp
.ne 2
.mk
.na
\fB\fBzpool upgrade\fR\fR
.ad
.sp .6
.RS 4n
Identifies a pool's on-disk version, which determines available pool features in the currently
running software release. You can continue to use older pool versions, but some features might
not be available.
.RE

.sp
.ne 2
.mk
.na
\fB\fBzpool upgrade\fR \fB-v\fR\fR
.ad
.sp .6
.RS 4n
Displays \fBZFS\fR versions supported by the current software. The current ZFS pool versions and
all previous supported versions are displayed, along with an explanation of the features provided
with each version.
.RE
.RE
.\"
.\" = = = = = = = = = = ZPOOL SHOWDISKS = = = = = = = = = =
.sp
.ne 2
.mk
.na
\fB\fBzpool showdisks\fR\fR
.ad
.sp .6
.RS 4n
Shows disks that are likely available for use with zfs storage pools. A diskutil(8) list will show all the disks in the system.
.RE

.SH EXAMPLES
.LP

.LP
\fBExample 1 \fRCreating a RAID-Z Storage Pool
.sp
.LP
The following command creates a pool with a single \fBraidz2\fR root \fIvdev\fR that consists of six disks.

.sp
.in +2
.nf
# \fBzpool create tank raidz2 /dev/disk1 /dev/disk2 /dev/disk3 /dev/disk4 /dev/disk5 /dev/disk6\fR
.fi
.in -2
.sp

.LP
\fBExample 2 \fRCreating a Mirrored Storage Pool
.sp
.LP
The following command creates a pool with two mirrors, where each mirror contains two disks.

.sp
.in +2
.nf
# \fBzpool create tank mirror /dev/disk1 /dev/disk2 mirror /dev/disk3 /dev/disk4\fR
.fi
.in -2
.sp

.LP
\fBExample 3 \fRAdding a Mirror to a ZFS Storage Pool
.LP
The following command adds two mirrored disks to the pool "\fItank\fR", assuming the pool is already made up of two-way mirrors. The additional space is immediately available to any datasets within the pool.

.sp
.in +2
.nf
# \fBzpool add tank mirror /dev/disk5 /dev/disk6\fR
.fi
.in -2
.sp

.LP
\fBExample 4 \fRListing Available ZFS Storage Pools
.LP
The following command lists all available pools on the system. In this case, the pool \fIdenver\fR is faulted due to a missing device.

.LP
The results from this command are similar to the following:

.sp
.in +2
.nf
\fB# zpool list\fR
     NAME    SIZE  ALLOC   FREE    CAP  HEALTH    ALTROOT
     depot  1.00T  3.87G   996G     0%  ONLINE    -
      vail   119G  96.8G  22.4G    81%  DEGRADED  -
    denver      -      -      -     0%  FAULTED   -
.fi
.in -2
.sp

.LP
\fBExample 5 \fRDestroying a ZFS Storage Pool
.LP
The following command destroys the pool "\fItank\fR" and any datasets contained within.

.sp
.in +2
.nf
# \fBzpool destroy -f tank\fR
.fi
.in -2
.sp

.LP
\fBExample 6 \fRExporting a ZFS Storage Pool
.LP
The following command exports the devices in pool \fItank\fR so that they can be relocated or later imported.

.sp
.in +2
.nf
# \fBzpool export tank\fR
.fi
.in -2
.sp

.LP
\fBExample 7 \fRImporting a ZFS Storage Pool
.LP
The following command displays available pools, and then imports the pool "tank" for use on the system.

.LP
The results from this command are similar to the following:

.sp
.in +2
.nf
# \fBzpool import\fR
 pool: tank
   id: 15451357997522795478
state: ONLINE
action: The pool can be imported using its name or numeric identifier.
config:

       tank        ONLINE
         mirror-0  ONLINE
           GPTE_6A6490B2-DE02-42E7-8678-9AA647FB291F  ONLINE
           GPTE_B0A6CC2D-315C-4EF3-AB4A-3EAA4CDA1E14  ONLINE

# \fBzpool import tank\fR
.fi
.in -2
.sp

.LP
\fBExample 8 \fROverriding the default ashift value for Advanced Format 512e drives
.LP
The following command will set the ashift value to 12 as expected for a 4096 sector size:
.sp
.in +2
.nf
# \fBzpool create -o ashift=12 tank mirror /dev/disk2 /dev/disk4\fR
.fi
.in -2
.sp
.LP
You can verify the results (ashift = 12) using the \fBzdb -l\fR command, as follows:
.sp
.in +2
.nf
# \fBzdb -l /dev/rdisk2 | grep ashift\fR
        ashift: 12
        ashift: 12
        ashift: 12
        ashift: 12
.fi
.in -2
.sp

.\"
.\" = = = = = = = = = = EXIT STATUS = = = = = = = = = =
.\"
.SH EXIT STATUS
.LP
The following exit values are returned:
.sp
.ne 2
.mk
.na
\fB\fB0\fR\fR
.ad
.RS 4n
.rt  
Successful completion. 
.RE
.sp
.ne 2
.mk
.na
\fB\fB1\fR\fR
.ad
.RS 4n
.rt  
An error occurred.
.RE
.sp
.ne 2
.mk
.na
\fB\fB2\fR\fR
.ad
.RS 4n
.rt  
Invalid command line options were specified.
.RE
.SH SEE ALSO
.LP
\fBzfs\fR(8), \fBdiskutil\fR(8)
