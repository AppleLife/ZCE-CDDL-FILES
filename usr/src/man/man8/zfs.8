'\" te
.\" Copyright (c) 2009 Sun Microsystems, Inc. All Rights Reserved.
.\" The contents of this file are subject to the terms of the Common Development and Distribution License (the "License").  You may not use this file except in compliance with the License. You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE or http://www.opensolaris.org/os/licensing.
.\"  See the License for the specific language governing permissions and limitations under the License. When distributing Covered Code, include this CDDL HEADER in each file and include the License file at usr/src/OPENSOLARIS.LICENSE.  If applicable, add the following below this CDDL HEADER, with
.\" the fields enclosed by brackets "[]" replaced with your own identifying information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" Portions Copyright (c) 2012 GreenBytes, Inc. All Rights Reserved.
.TH zfs 8 "12 Sep 2012" "Darwin" "System Administration Commands"
.SH NAME
zfs \- configures ZFS file systems
.SH SYNOPSIS
.LP
.nf
\fBzfs\fR [\fB-?\fR]
.fi

.LP
.nf
\fBzfs\fR \fBcreate\fR [\fB-p\fR] [\fB-o\fR \fIproperty\fR=\fIvalue\fR] ... \fIfilesystem\fR
.fi

.LP
.nf
\fBzfs\fR \fBdestroy\fR [\fB-rRf\fR] \fIfilesystem\fR
.fi

.LP
.nf
\fBzfs\fR \fBdestroy\fR [\fB-rRd\fR] \fIsnapshot\fR
.fi

.LP
.nf
\fBzfs\fR \fBsnapshot\fR [\fB-r\fR] [\fB-o\fR \fIproperty\fR=\fIvalue\fR]...
      \fIfilesystem@snapname\fR
.fi

.LP
.nf
\fBzfs\fR \fBrollback\fR [\fB-rRf\fR] \fIsnapshot\fR
.fi

.LP
.nf
\fBzfs\fR \fBclone\fR [\fB-p\fR] [\fB-o\fR \fIproperty\fR=\fIvalue\fR] ... \fIsnapshot\fR \fIfilesystem\fR
.fi

.LP
.nf
\fBzfs\fR \fBpromote\fR \fIclone-filesystem\fR
.fi

.LP
.nf
\fBzfs\fR \fBrename\fR \fIfilesystem\fR|\fIsnapshot\fR
     \fIfilesystem\fR|\fIsnapshot\fR
.fi

.LP
.nf
\fBzfs\fR \fBrename\fR [\fB-p\fR] \fIfilesystem\fR \fIfilesystem\fR
.fi

.LP
.nf
\fBzfs\fR \fBrename\fR \fB-r\fR \fIsnapshot\fR \fIsnapshot\fR
.fi

.LP
.nf
\fBzfs\fR \fBlist\fR [\fB-r\fR|\fB-d\fR \fIdepth\fR][\fB-H\fR][\fB-o\fR \fIproperty\fR[,...]] [\fB-t\fR \fItype\fR[,...]]
     [\fB-s\fR \fIproperty\fR] ... [\fB-S\fR \fIproperty\fR] ... [\fIfilesystem\fR | \fIsnapshot\fR] ...
.fi

.LP
.nf
\fBzfs\fR \fBset\fR \fIproperty\fR=\fIvalue\fR \fIfilesystem\fR | \fIsnapshot\fR ...
.fi

.LP
.nf
\fBzfs\fR \fBget\fR [\fB-r\fR|\fB-d\fR \fIdepth\fR][\fB-Hp\fR][\fB-o\fR \fIfield\fR[,...]] [\fB-s\fR \fIsource\fR[,...]]
     "\fIall\fR" | \fIproperty\fR[,...] \fIfilesystem\fR|\fIsnapshot\fR ...
.fi

.LP
.nf
\fBzfs\fR \fBinherit\fR [\fB-rS\fR] \fIproperty\fR \fIfilesystem\fR | snapshot\fR ...
.fi

.LP
.nf
\fBzfs\fR \fBupgrade\fR [\fB-v\fR]
.fi

.LP
.nf
\fBzfs\fR \fBmount\fR
.fi

.LP
.nf
\fBzfs\fR \fBmount\fR [\fB-vO\fR] [\fB-o \fIoptions\fR\fR] \fB-a\fR | \fIfilesystem\fR
.fi

.LP
.nf
\fBzfs\fR \fBunmount\fR [\fB-f\fR] \fB-a\fR | \fIfilesystem\fR|\fImountpoint\fR
.fi

.LP
.nf
\fBzfs\fR \fBsend\fR [\fB-DvRbp\fR] [\fB-\fR[\fBiI\fR] \fIsnapshot\fR] \fIsnapshot\fR
.fi

.LP
.nf
\fBzfs\fR \fBreceive\fR [\fB-vnFu\fR] \fIfilesystem\fR|\fIsnapshot\fR
.fi

.LP
.nf
\fBzfs\fR \fBreceive\fR [\fB-vnFu\fR] \fB-d\fR \fIfilesystem\fR
.fi

.LP
.nf
\fBzfs\fR \fBhold\fR [\fB-r\fR] \fItag\fR \fIsnapshot\fR...
.fi

.LP
.nf
\fBzfs\fR \fBholds\fR [\fB-H\fR] [\fB-r\fR] \fIsnapshot\fR...
.fi

.LP
.nf
\fBzfs\fR \fBrelease\fR [\fB-r\fR] \fItag\fR \fIsnapshot\fR...
.fi

.LP
.nf
\fBzfs\fR \fBdiff\fR [\fB-FHt\fR] ... \fIsnapshot\fR [\fIsnapshot\fR | filesystem]
.fi

.SH DESCRIPTION
.sp
.LP
The \fBzfs\fR command configures \fBZFS\fR datasets within a \fBZFS\fR storage
pool, as described in \fBzpool\fR(8). A dataset is identified by a unique path
within the \fBZFS\fR namespace. For example:
.sp
.in +2
.nf
pool/{filesystem,snapshot}
.fi
.in -2
.sp

.sp
.LP
where the maximum length of a dataset name is \fBMAXNAMELEN\fR (256 bytes).
.sp
.LP
A dataset can be one of the following:
.sp
.ne 2
.mk
.na
\fB\fIfile system\fR\fR
.ad
.sp .6
.RS 4n
A \fBZFS\fR dataset of type \fBfilesystem\fR can be mounted within the standard
system namespace and behaves like other file systems. \fBZFS\fR file systems are
designed to be \fBPOSIX\fR compliant and natively implement expected POSIX
features like permissions, sparse files, symbolic links and hard links.
.RE

.sp
.ne 2
.mk
.na
\fB\fIsnapshot\fR\fR
.ad
.sp .6
.RS 4n
A read-only version of a file system at a given point in time. It is specified as \fIfilesystem@name\fR.
.RE

.SS "ZFS File System Hierarchy"
.sp
.LP
A \fBZFS\fR storage pool is a logical collection of devices that provide space for datasets. A storage pool is also the root of the \fBZFS\fR file system hierarchy.
.sp
.LP
The root of the pool can be accessed as a file system, such as mounting and unmounting, taking snapshots, and setting properties. The physical storage characteristics, however, are managed by the \fBzpool\fR(8) command.
.sp
.LP
See \fBzpool\fR(8) for more information on creating and administering pools.
.SS "Snapshots"
.sp
.LP
A snapshot is a read-only copy of a file system. Snapshots can be created extremely quickly, and initially consume no additional space within the pool. As data within the active dataset changes, the snapshot consumes more data than would otherwise be shared with the active dataset.
.sp
.LP
Snapshots can have arbitrary names.
.sp
.LP
File system snapshots can be accessed under the \fB\&.zfs/snapshot\fR directory
in the root of the file system. Snapshots are automatically mounted on demand
and may be unmounted at regular intervals. The visibility of the \fB\&.zfs\fR
directory can be controlled by the \fBsnapdir\fR property.
.SS "Clones"
.sp
.LP
A clone is a writable file system whose initial contents are the same as another dataset. As with snapshots, creating a clone is nearly instantaneous, and initially consumes no additional space.
.sp
.LP
Clones can only be created from a snapshot. When a snapshot is cloned, it creates an implicit dependency between the parent and child. Even though the clone is created somewhere else in the dataset hierarchy, the original snapshot cannot be destroyed as long as a clone exists. The \fBorigin\fR property exposes this dependency, and the \fBdestroy\fR command lists any such dependencies, if they exist.
.sp
.LP
The clone parent-child dependency relationship can be reversed by using the \fBpromote\fR subcommand. This causes the "origin" file system to become a clone of the specified file system, which makes it possible to destroy the file system that the clone was created from.
.SS "Mount Points"
.sp
.LP
Creating a \fBZFS\fR file system is a simple operation, so the number of file systems per system is likely to be numerous. To cope with this, \fBZFS\fR automatically manages mounting and unmounting file systems without the need to edit the \fB/etc/fstab\fR file. All automatically managed file systems are mounted by \fBZFS\fR at boot time.
.sp
.LP
By default, file systems are mounted under \fB/\fIpath\fR\fR, where \fIpath\fR is the name of the file system in the \fBZFS\fR namespace. Directories are created and destroyed as needed.
.sp
.LP
A file system can also have a mount point set in the \fBmountpoint\fR property. This directory is created as needed, and \fBZFS\fR automatically mounts the file system when the \fBzfs mount -a\fR command is invoked (without editing \fB/etc/fstab\fR). The \fBmountpoint\fR property can be inherited, so if \fBpool/home\fR has a mount point of \fB/export/stuff\fR, then \fBpool/home/user\fR automatically inherits a mount point of \fB/export/stuff/user\fR.
.sp
.LP
A file system \fBmountpoint\fR property of \fBnone\fR prevents the file system from being mounted.
.sp
.LP
If needed, \fBZFS\fR file systems can also be managed with traditional tools (\fBmount\fR, \fBumount\fR, \fB/etc/fstab\fR). If a file system's mount point is set to \fBlegacy\fR, \fBZFS\fR makes no attempt to manage the file system, and the administrator is responsible for mounting and unmounting the file system.
.SS "Native Properties"
.sp
.LP
Properties are divided into two types, native properties and user-defined (or
"user") properties. Native properties either export internal statistics or
control \fBZFS\fR behavior. In addition, native properties are either editable
or read-only. User properties have no effect on \fBZFS\fR behavior, but you can
use them to annotate datasets in a way that is meaningful in your environment.
For more information about user properties, see the "User Properties" section,
below.
.sp
.LP
Every dataset has a set of properties that export statistics about the dataset
as well as control various behaviors. Properties are inherited from the parent
unless overridden by the child. Some properties apply only to certain types of
datasets (file systems or snapshots).
.sp
.LP
The values of numeric properties can be specified using human-readable suffixes (for example, \fBk\fR, \fBKB\fR, \fBM\fR, \fBGb\fR, and so forth, up to \fBZ\fR for zettabyte). The following are all valid (and equal) specifications: 
.sp
.in +2
.nf
1536M, 1.5g, 1.50GB
.fi
.in -2
.sp

.sp
.LP
The values of non-numeric properties are case sensitive and must be lowercase, except for the \fBmountpoint\fR property.
.sp
.LP
The following native properties consist of read-only statistics about the dataset. These properties can be neither set, nor inherited. Native properties apply to all dataset types unless otherwise noted.
.sp
.ne 2
.mk
.na
\fB\fBavailable\fR\fR
.ad
.sp .6
.RS 4n
The amount of space available to the dataset and all its children, assuming
that there is no other activity in the pool. Because space is shared within a
pool, availability can be limited by any number of factors, including physical
pool size, quotas, reservations, or other datasets within the pool.
.sp
This property can also be referred to by its shortened column name, \fBavail\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBcompressratio\fR\fR
.ad
.sp .6
.RS 4n
For non-snapshots, the compression ratio achieved for the \fBused\fR space of this dataset, expressed as a multiplier.  The \fBused\fR property includes descendant datasets, and, for clones, does not include the space shared with the origin snapshot.  For snapshots, the \fBcompressratio\fR is the same as the \fBrefcompressratio\fR property.  Compression can be turned on by running: \fBzfs set compression=on \fIdataset\fR\fR. The default value is \fBoff\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBcreation\fR\fR
.ad
.sp .6
.RS 4n
The time this dataset was created.
.RE

.sp
.ne 2
.mk
.na
\fB\fBdefer_destroy\fR\fR
.ad
.sp .6
.RS 4n
This property is \fBon\fR if the snapshot has been marked for deferred destruction by using the \fBzfs destroy\fR \fB-d\fR command. Otherwise, the property is \fBoff\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBmounted\fR\fR
.ad
.sp .6
.RS 4n
For file systems, indicates whether the file system is currently mounted. This property can be either \fByes\fR or \fBno\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBorigin\fR\fR
.ad
.sp .6
.RS 4n
For cloned file systems the snapshot from which the clone was created. The origin cannot be destroyed (even with the \fB-r\fR or \fB-f\fR options) so long as a clone exists.
.RE

.sp
.ne 2
.mk
.na
\fB\fBreferenced\fR\fR
.ad
.sp .6
.RS 4n
The amount of data that is accessible by this dataset, which may or may not be
shared with other datasets in the pool. When a snapshot or clone is created, it
initially references the same amount of space as the file system or snapshot it
was created from, since its contents are identical.
.sp
This property can also be referred to by its shortened column name, \fBrefer\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBrefcompressratio\fR\fR
.ad
.sp .6
.RS 4n
The compression ratio achieved for the \fBreferenced\fR space of this
dataset, expressed as a multiplier.  See also the \fBcompressratio\fR
property.
.RE

.sp
.ne 2
.mk
.na
\fB\fBtype\fR\fR
.ad
.sp .6
.RS 4n
The type of dataset: \fBfilesystem\fR or \fBsnapshot\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBused\fR\fR
.ad
.sp .6
.RS 4n
The amount of space consumed by this dataset and all its descendants. This is
the value that is checked against this dataset's quota and reservation. The
space used does not include this dataset's reservation, but does take into
account the reservations of any descendent datasets. The amount of space that a
dataset consumes from its parent, as well as the amount of space that are freed
if this dataset is recursively destroyed, is the greater of its space used and
its reservation.
.sp
When snapshots (see the "Snapshots" section) are created, their space is
initially shared between the snapshot and the file system, and possibly with
previous snapshots. As the file system changes, space that was previously
shared becomes unique to the snapshot, and counted in the snapshot's space
used. Additionally, deleting snapshots can increase the amount of space unique
to (and used by) other snapshots.
.sp
The amount of space used, available, or referenced does not take into account
pending changes. Pending changes are generally accounted for within a few
seconds. Committing a change to a disk using \fBfsync\fR(2) or \fBO_SYNC\fR
does not necessarily guarantee that the space usage information is updated
immediately.
.RE

.sp
.ne 2
.mk
.na
\fB\fBusedby*\fR\fR
.ad
.sp .6
.RS 4n
The \fBusedby*\fR properties decompose the \fBused\fR properties into the
various reasons that space is used. Specifically, \fBused\fR =
\fBusedbychildren\fR + \fBusedbydataset\fR + \fBusedbyrefreservation\fR +,
\fBusedbysnapshots\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBusedbychildren\fR\fR
.ad
.sp .6
.RS 4n
The amount of space used by children of this dataset, which would be freed if
all the dataset's children were destroyed.
.RE

.sp
.ne 2
.mk
.na
\fB\fBusedbydataset\fR\fR
.ad
.sp .6
.RS 4n
The amount of space used by this dataset itself, which would be freed if the
dataset were destroyed (after first removing any \fBrefreservation\fR and
destroying any necessary snapshots or descendants).
.RE

.sp
.ne 2
.mk
.na
\fB\fBusedbyrefreservation\fR\fR
.ad
.sp .6
.RS 4n
The amount of space used by a \fBrefreservation\fR set on this dataset, which
would be freed if the \fBrefreservation\fR was removed.
.RE

.sp
.ne 2
.mk
.na
\fB\fBusedbysnapshots\fR\fR
.ad
.sp .6
.RS 4n
The amount of space consumed by snapshots of this dataset. In particular, it
is the amount of space that would be freed if all of this dataset's snapshots
were destroyed. Note that this is not simply the sum of the snapshots'
\fBused\fR properties because space can be shared by multiple snapshots.
.RE

.sp
.ne 2
.mk
.na
\fB\fBuserused@\fR\fIuser\fR\fR
.ad
.sp .6
.RS 4n
The amount of space consumed by the specified user in this dataset. Space is
charged to the owner of each file, as displayed by \fBls\fR \fB-l\fR. The
amount of space charged is displayed by \fBdu\fR and \fBls\fR \fB-s\fR. See
the \fBzfs userspace\fR subcommand for more information.
.sp
Unprivileged users can access only their own space usage. The root user, or a
user who has been granted the \fBuserused\fR privilege with \fBzfs allow\fR,
can access everyone's usage.
.sp
The \fBuserused@\fR... properties are not displayed by \fBzfs get all\fR. The
user's name must be appended after the \fB@\fR symbol, using one of the
following forms:
.RS +4
.TP
.ie t \(bu
.el o
\fIPOSIX name\fR (for example, \fBjared\fR)
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fIPOSIX numeric ID\fR (for example, \fB504\fR)
.RE
.RE

.sp
.ne 2
.mk
.na
\fB\fBuserrefs\fR\fR
.ad
.sp .6
.RS 4n
This property is set to the number of user holds on this snapshot. User holds
are set by using the \fBzfs hold\fR command.
.RE

.sp
.ne 2
.mk
.na
\fB\fBgroupused@\fR\fIgroup\fR\fR
.ad
.sp .6
.RS 4n
The amount of space consumed by the specified group in this dataset. Space is
charged to the group of each file, as displayed by \fBls\fR \fB-l\fR. See the
\fBuserused@\fR\fIuser\fR property for more information.
.sp
Unprivileged users can only access their own groups' space usage. The root
user, or a user who has been granted the \fBgroupused\fR privilege with \fBzfs
allow\fR, can access all groups' usage.
.RE

.sp
.ne 2
.mk
.na
\fB\fBversion\fR\fR
.ad
.sp .6
.RS 4n
The on-disk version of this file system, which is independent of the pool
version.
.RE

.sp
.LP
The following native properties can be used to change the behavior of a
\fBZFS\fR dataset.
.sp
.ne 2
.mk
.na
\fB\fBatime\fR=\fBon\fR | \fBoff\fR\fR
.ad
.sp .6
.RS 4n
Controls whether the access time for files is updated when they are read.
Turning this property off avoids producing write traffic when reading files
and can result in significant performance gains, though it might confuse
mailers and other similar utilities. The default value is \fBon\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBcanmount\fR=\fBon\fR | \fBoff\fR | \fBnoauto\fR\fR
.ad
.sp .6
.RS 4n
If this property is set to \fBoff\fR, the file system cannot be mounted, and is
ignored by \fBzfs mount -a\fR. Setting this property to \fBoff\fR is similar to
setting the \fBmountpoint\fR property to \fBnone\fR, except that the dataset
still has a normal \fBmountpoint\fR property, which can be inherited. Setting
this property to \fBoff\fR allows datasets to be used solely as a mechanism to
inherit properties. One example of setting \fBcanmount=\fR\fBoff\fR is to have
two datasets with the same \fBmountpoint\fR, so that the children of both
datasets appear in the same directory, but might have different inherited
characteristics.
.sp
When the \fBnoauto\fR option is set, a dataset can only be mounted and
unmounted explicitly. The dataset is not mounted automatically when the dataset
is created or imported, nor is it mounted by the \fBzfs mount -a\fR command or
unmounted by the \fBzfs unmount -a\fR command.
.sp
This property is not inherited.
.RE

.sp
.ne 2
.mk
.na
\fB\fBchecksum\fR=\fBon\fR | \fBfletcher2,\fR| \fBfletcher4\fR | \fBsha256\fR\fR
.ad
.sp .6
.RS 4n
Controls the checksum used to verify data integrity. The default value is
\fBon\fR, which automatically selects an appropriate algorithm (currently,
\fBfletcher2\fR, but this may change in future releases). Disabling checksums
is not supported on Darwin.
.sp
Changing this property affects only newly-written data.
.RE

.sp
.ne 2
.mk
.na
\fB\fBcompression\fR=\fBon\fR | \fBoff\fR | \fBlzjb\fR | \fBgzip\fR |
\fBgzip-\fR\fIN\fR | \fBzle\fR \fR
.ad
.sp .6
.RS 4n
Controls the compression algorithm used for this dataset. The \fBlzjb\fR
compression algorithm is optimized for performance while providing decent
data compression. Setting compression to \fBon\fR uses the \fBlzjb\fR
compression algorithm. The \fBgzip\fR compression algorithm uses the same
compression as the \fBgzip\fR(1) command. You can specify the \fBgzip\fR
level by using the value \fBgzip-\fR\fIN\fR where \fIN\fR is an integer
from 2 to 6. Currently, \fBgzip\fR is equivalent to \fBgzip-6\fR.
.sp
This property can also be referred to by its shortened column name
\fBcompress\fR. Changing this property affects only newly-written data.
.RE

.sp
.ne 2
.mk
.na
\fB\fBcopies\fR=\fB1\fR | \fB2\fR | \fB3\fR\fR
.ad
.sp .6
.RS 4n
Controls the number of copies of data stored for this dataset. These copies
are in addition to any redundancy provided by the pool, for example, mirroring
or RAID-Z. The copies are stored on different disks, if possible. The space
used by multiple copies is charged to the associated file and dataset, changing
the \fBused\fR property and counting against quotas and reservations.
.sp
Changing this property only affects newly-written data. Therefore, set this
property at file system creation time by using the \fB-o\fR
\fBcopies=\fR\fIN\fR option.
.RE

.sp
.ne 2
.mk
.na
\fB\fBdevices\fR=\fBon\fR | \fBoff\fR\fR
.ad
.sp .6
.RS 4n
Controls whether device nodes can be opened on this file system. The default
value is \fBon\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBexec\fR=\fBon\fR | \fBoff\fR\fR
.ad
.sp .6
.RS 4n
Controls whether processes can be executed from within this file system. The
default value is \fBon\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBmountpoint\fR=\fIpath\fR | \fBnone\fR\fR
.ad
.sp .6
.RS 4n
Controls the mount point used for this file system. See the "Mount Points"
section for more information on how this property is used. 
.sp
When the \fBmountpoint\fR property is changed for a file system, the file
system and any children that inherit the mount point are unmounted. Mountpoints
are automatically remounted in the new location if the property was previously
\fBnone\fR, or if they were mounted before the property was changed.
.RE

.sp
.ne 2
.mk
.na
\fB\fBprimarycache\fR=\fBall\fR | \fBnone\fR | \fBmetadata\fR\fR
.ad
.sp .6
.RS 4n
Controls what is cached in the primary cache (ARC). If this property is set to
\fBall\fR, then both user data and metadata is cached. If this property is set
to \fBnone\fR, then neither user data nor metadata is cached. If this property
is set to \fBmetadata\fR, then only metadata is cached. The default value is
\fBall\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBquota\fR=\fIsize\fR | \fBnone\fR\fR
.ad
.sp .6
.RS 4n
Limits the amount of space a dataset and its descendants can consume. This
property enforces a hard limit on the amount of space used. This includes all
space consumed by descendants, including file systems and snapshots. Setting a
quota on a descendant of a dataset that already has a quota does not override
the ancestor's quota, but rather imposes an additional limit.
.RE

.sp
.ne 2
.mk
.na
\fB\fBsync\fR=standard | always | disabled\fR
.ad
.sp .6
.RS 4n
Determines the degree to which file system transactions are synchronized. This
property can be set when a dataset is created, or dynamically, and will take
effect immediately. \fBsync\fR can have one of the following settings:
.sp
.ne 2
.mk
.na
\fB\fBstandard\fR\fR
.ad
.RS 12n
.rt  
The default option. Synchronous file system transactions are written to the
intent log and then all devices written are flushed to ensure the data is
stable (that is, not cached by the system or any devices).
.RE

.sp
.ne 2
.mk
.na
\fB\fBalways\fR\fR
.ad
.RS 12n
.rt  
Every file system transaction would be written and flushed to stable storage.
This setting should be used only where extreme caution is required, as there is
a significant performance penalty.
.RE

.sp
.ne 2
.mk
.na
\fB\fBdisabled\fR\fR
.ad
.RS 12n
.rt  
Synchronous requests are disabled. File system transactions commit to stable
storage only on the next DMU transaction group commit, which might be after
many seconds. This setting gives the highest performance. However, it is very
dangerous as ZFS would be ignoring the synchronous transaction demands of
applications such as databases (e.g. Mail, iTunes, iPhoto, Spotlight, etc.).
.sp
Expert users should only use this option only when all the risks are
understood.
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fBuserquota@\fR\fIuser\fR=\fIsize\fR | \fBnone\fR\fR
.ad
.sp .6
.RS 4n
Limits the amount of space consumed by the specified user. User space
consumption is identified by the \fBuserspace@\fR\fIuser\fR property.
.sp
Enforcement of user quotas may be delayed by several seconds. This delay means
that a user might exceed her quota before the system notices that they are over
quota and begins to refuse additional writes with the \fBEDQUOT\fR error
message. See the \fBzfs userspace\fR subcommand for more information.
.sp
Unprivileged users can only access their own groups' space usage. The root user
can get and set everyone's quota.
.sp
The userquota@... properties are not displayed by zfs get all. The user's name
must be appended after the @ symbol, using one of the following forms:
.RS +4
.TP
.ie t \(bu
.el o
\fIPOSIX name\fR (for example, \fBjared\fR)
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fIPOSIX numeric ID\fR (for example, \fB504\fR)
.RE
.RE

.sp
.ne 2
.mk
.na
\fB\fBgroupquota@\fR\fIgroup\fR=\fIsize\fR | \fBnone\fR\fR
.ad
.sp .6
.RS 4n
Limits the amount of space consumed by the specified group. Group space
consumption is identified by the \fBuserquota@\fR\fIuser\fR property.
.sp
Unprivileged users can access only their own groups' space usage. The root
user, or a user who has been granted the \fBgroupquota\fR privilege with
\fBzfs allow\fR, can get and set all groups' quotas.
.RE

.sp
.ne 2
.mk
.na
\fB\fBreadonly\fR=\fBon\fR | \fBoff\fR\fR
.ad
.sp .6
.RS 4n
Controls whether this dataset can be modified. The default value is \fBoff\fR.
.sp
This property can also be referred to by its shortened column name,
\fBrdonly\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBrecordsize\fR=\fIsize\fR\fR
.ad
.sp .6
.RS 4n
Specifies a suggested block size for files in the file system. This property
is designed solely for use with database workloads that access files in
fixed-size records. \fBZFS\fR automatically tunes block sizes according to
internal algorithms optimized for typical access patterns. 
.sp
For databases that create very large files but access them in small random
chunks, these algorithms may be suboptimal. Specifying a \fBrecordsize\fR
greater than or equal to the record size of the database can result in
significant performance gains. Use of this property for general purpose file
systems is strongly discouraged, and may adversely affect performance.
.sp
The size specified must be a power of two greater than or equal to 512 and less
than or equal to 128 Kbytes.
.sp
Changing the file system's \fBrecordsize\fR affects only files created
afterward; existing files are unaffected.
.sp
This property can also be referred to by its shortened column name,
\fBrecsize\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBrefquota\fR=\fIsize\fR | \fBnone\fR\fR
.ad
.sp .6
.RS 4n
Limits the amount of space a dataset can consume. This property enforces a
hard limit on the amount of space used. This hard limit does not include
space used by descendants, including file systems and snapshots.
.RE

.sp
.ne 2
.mk
.na
\fB\fBreservation\fR=\fIsize\fR | \fBnone\fR\fR
.ad
.sp .6
.RS 4n
The minimum amount of space guaranteed to a dataset, not including its
descendants. When the \fBusedbydataset\fR space is below this value, the
dataset is treated as if it were taking up the amount of space specified by
\fBrefreservation\fR. The \fBusedbyrefreservation\fR figure represents this
extra space, adding to the total used space charged to the dataset, and in turn
consuming from the parent datasets' usage, quotas, and reservations. This
protects the dataset from overcommitment of pool resources, by ensuring that
space for future writes is reserved in advance.
.sp
Space shared with snapshots can later be replaced with new data, and the
snapshot represents a committment to keep both copies. If \fBrefreservation\fR
is set, \fBusedbyrefreservation\fR must be increased to the full size of
\fBrefreservation\fR when taking a new snapshot, accounting for this commitment.
If there is insufficient space available to the dataset for this increase,
snapshot creation will be denied.
.sp
This property can also be referred to by its shortened column name,
\fBreserv\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBsecondarycache\fR=\fBall\fR | \fBnone\fR | \fBmetadata\fR\fR
.ad
.sp .6
.RS 4n
Controls what is cached in the secondary cache (L2ARC). If this property is
set to \fBall\fR, then both user data and metadata is cached. If this property
is set to \fBnone\fR, then neither user data nor metadata is cached. If this
property is set to \fBmetadata\fR, then only metadata is cached. The default
value is \fBall\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBsetuid\fR=\fBon\fR | \fBoff\fR\fR
.ad
.sp .6
.RS 4n
Controls whether the set-\fBUID\fR bit is respected for the file system. The
default value is \fBon\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBlogbias\fR = \fBlatency\fR | \fBthroughput\fR\fR
.ad
.sp .6
.RS 4n
Provide a hint to ZFS about handling of synchronous requests in this dataset.
If \fBlogbias\fR is set to \fBlatency\fR (the default), ZFS will use pool log
devices (if configured) to handle the requests at low latency. If \fBlogbias\fR
is set to \fBthroughput\fR, ZFS will not use configured pool log devices. ZFS
will instead optimize synchronous operations for global pool throughput and
efficient use of resources.
.RE

.sp
.ne 2
.mk
.na
\fB\fBsnapdir\fR=\fBhidden\fR | \fBvisible\fR\fR
.ad
.sp .6
.RS 4n
Controls whether the \fB\&.zfs\fR directory is hidden or visible in the root of
the file system as discussed in the "Snapshots" section. The default value is
\fBhidden\fR.
.RE

.sp
.LP
The following three properties cannot be changed after the file system is
created, and therefore, should be set when the file system is created. If
the properties are not set with the \fBzfs create\fR or \fBzpool create\fR
commands, these properties are inherited from the parent dataset. If the
parent dataset lacks these properties due to having been created prior to
these features being supported, the new file system will have the default
values for these properties.
.sp
.ne 2
.mk
.na
\fB\fBcasesensitivity\fR=\fBsensitive\fR | \fBinsensitive\fR\fR
.ad
.sp .6
.RS 4n
Indicates whether the file name matching algorithm used by the file system
should be case-sensitive or case-insensitive. The default value for the
\fBcasesensitivity\fR property is \fBsensitive\fR. Traditionally, UNIX and
POSIX file systems have case-sensitive file names.
.RE

.sp
.ne 2
.mk
.na
\fB\fBnormalization\fR = \fBnone\fR | \fBformC\fR | \fBformD\fR
.ad
.sp .6
.RS 4n
Indicates whether the file system should perform a \fBunicode\fR normalization
of file names whenever two file names are compared, and which normalization
algorithm should be used. File names are always stored unmodified, names are
normalized as part of any comparison process. If this property is set to a
legal value other than \fBnone\fR, and the \fButf8only\fR property was left
unspecified, the \fButf8only\fR property is automatically set to \fBon\fR. The
default value of the \fBnormalization\fR property on Mac OS X is \fBformD\fR.
This property cannot be changed after the file system is created.
.RE

.sp
.ne 2
.mk
.na
\fB\fButf8only\fR=\fBon\fR | \fBoff\fR\fR
.ad
.sp .6
.RS 4n
Indicates whether the file system should reject file names that include
characters that are not present in the \fBUTF-8\fR character code set. If this
property is explicitly set to \fBoff\fR, the normalization property must either
not be explicitly set or be set to \fBnone\fR. The default value for the
\fButf8only\fR property on Mac OS X is \fBon\fR. This property cannot be
changed after the file system is created.
.RE

.SS "Temporary Mount Point Properties"
.sp
.LP
When a file system is mounted, either through \fBmount\fR(8) for legacy mounts
or the \fBzfs mount\fR command for normal file systems, its mount options are
set according to its properties. The correlation between properties and mount
options is as follows:
.sp
.in +2
.nf
    PROPERTY                MOUNT OPTION
     devices                 devices/nodevices
     exec                    exec/noexec
     readonly                ro/rw
     setuid                  setuid/nosetuid
.fi
.in -2
.sp

.sp
.LP
In addition, these options can be set on a per-mount basis using the \fB-o\fR
option, without affecting the property that is stored on disk. The values
specified on the command line override the values stored in the dataset. The
\fB-nosuid\fR option is an alias for \fBnodevices,nosetuid\fR. These properties
are reported as "temporary" by the \fBzfs get\fR command. If the properties are
changed while the dataset is mounted, the new setting overrides any temporary
settings.
.SS "User Properties"
.sp
.LP
In addition to the standard native properties, \fBZFS\fR supports arbitrary
user properties. User properties have no effect on \fBZFS\fR behavior, but
applications or administrators can use them to annotate datasets (file systems
and snapshots).
.sp
.LP
User property names must contain a colon (\fB:\fR) character to distinguish
them from native properties. They may contain lowercase letters, numbers, and
the following punctuation characters: colon (\fB:\fR), dash (\fB-\fR), period
(\fB\&.\fR), and underscore (\fB_\fR). The expected convention is that the
property name is divided into two portions such as
\fImodule\fR\fB:\fR\fIproperty\fR, but this namespace is not enforced by
\fBZFS\fR. User property names can be at most 256 characters, and cannot begin
with a dash (\fB-\fR).
.sp
.LP
When making programmatic use of user properties, it is strongly suggested to
use a reversed \fBDNS\fR domain name for the \fImodule\fR component of property
names to reduce the chance that two independently-developed packages use the
same property name for different purposes.
.sp
.LP
The values of user properties are arbitrary strings, are always inherited, and
are never validated. All of the commands that operate on properties (\fBzfs
list\fR, \fBzfs get\fR, \fBzfs set\fR, and so forth) can be used to manipulate
both native properties and user properties. Use the \fBzfs inherit\fR command
to clear a user property . If the property is not defined in any parent
dataset, it is removed entirely. Property values are limited to 1024 characters.
.SH SUBCOMMANDS
.sp
.LP
All subcommands that modify state are logged persistently to the pool in their
original form.
.sp
.ne 2
.mk
.na
\fB\fBzfs ?\fR\fR
.ad
.sp .6
.RS 4n
Displays a help message.
.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs create\fR [\fB-p\fR] [\fB-o\fR \fIproperty\fR=\fIvalue\fR] ...
\fIfilesystem\fR\fR
.ad
.sp .6
.RS 4n
Creates a new \fBZFS\fR file system. The file system is automatically mounted
according to the \fBmountpoint\fR property inherited from the parent.
.sp
.ne 2
.mk
.na
\fB\fB-p\fR\fR
.ad
.sp .6
.RS 4n
Creates all the non-existing parent datasets. Datasets created in this manner
are automatically mounted according to the \fBmountpoint\fR property inherited
from their parent. Any property specified on the command line using the
\fB-o\fR option is ignored. If the target filesystem already exists, the
operation completes successfully.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-o\fR \fIproperty\fR=\fIvalue\fR\fR
.ad
.sp .6
.RS 4n
Sets the specified property as if the command \fBzfs set\fR
\fIproperty\fR=\fIvalue\fR was invoked at the same time the dataset was
created. Any editable \fBZFS\fR property can also be set at creation time.
Multiple \fB-o\fR options can be specified. An error results if the same
property is specified in multiple \fB-o\fR options.
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs destroy\fR [\fB-rRf\fR] \fIfilesystem\fR|\fIsnapshot\fR\fR
.ad
.sp .6
.RS 4n
Destroys the given dataset. By default, the command unmounts any file systems
that are currently mounted, and refuses to destroy a dataset that has active
dependents (children or clones).
.sp
.ne 2
.mk
.na
\fB\fB-r\fR\fR
.ad
.sp .6
.RS 4n
Recursively destroy all children.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-R\fR\fR
.ad
.sp .6
.RS 4n
Recursively destroy all dependents, including cloned file systems outside the
target hierarchy.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-f\fR\fR
.ad
.sp .6
.RS 4n
Force an unmount of any file systems using the \fBunmount -f\fR command. This
option has no effect on non-file systems or unmounted file systems.
.RE

Extreme care should be taken when applying either the \fB-r\fR or the \fB-R\fR
options, as they can destroy large portions of a pool and cause unexpected
behavior for mounted file systems in use.
.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs destroy\fR [\fB-rRd\fR] \fIsnapshot\fR\fR
.ad
.sp .6
.RS 4n
The given snapshot is destroyed immediately if and only if the \fBzfs
destroy\fR command without the \fB-d\fR option would have destroyed it. Such
immediate destruction would occur, for example, if the snapshot had no clones
and the user-initiated reference count were zero.
.sp
If the snapshot does not qualify for immediate destruction, it is marked for
deferred destruction. In this state, it exists as a usable, visible snapshot
until both of the preconditions listed above are met, at which point it is
destroyed.
.sp
.ne 2
.mk
.na
\fB\fB-d\fR\fR
.ad
.sp .6
.RS 4n
Defer snapshot deletion.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-r\fR\fR
.ad
.sp .6
.RS 4n
Destroy (or mark for deferred destruction) all snapshots with this name in
descendent file systems.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-R\fR\fR
.ad
.sp .6
.RS 4n
Recursively destroy all dependents.
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs snapshot\fR [\fB-r\fR] [\fB-o\fR \fIproperty\fR=\fIvalue\fR] ...
\fIfilesystem@snapname\fR\fR
.ad
.sp .6
.RS 4n
Creates a snapshot with the given name. All previous modifications by
successful system calls to the file system are part of the snapshot. See the
"Snapshots" section for details.
.sp
.ne 2
.mk
.na
\fB\fB-r\fR\fR
.ad
.sp .6
.RS 4n
Recursively create snapshots of all descendent datasets. Snapshots are taken
atomically, so that all recursive snapshots correspond to the same moment in
time.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-o\fR \fIproperty\fR=\fIvalue\fR\fR
.ad
.sp .6
.RS 4n
Sets the specified property; see \fBzfs create\fR for details.
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs rollback\fR [\fB-rRf\fR] \fIsnapshot\fR\fR
.ad
.sp .6
.RS 4n
Roll back the given dataset to a previous snapshot. When a dataset is rolled
back, all data that has changed since the snapshot is discarded, and the
dataset reverts to the state at the time of the snapshot. By default, the
command refuses to roll back to a snapshot other than the most recent one. In
order to do so, all intermediate snapshots must be destroyed by specifying the
\fB-r\fR option.
.sp
The \fB-rR\fR options do not recursively destroy the child snapshots of a
recursive snapshot. Only the top-level recursive snapshot is destroyed by
either of these options. To completely roll back a recursive snapshot, you
must rollback the individual child snapshots.
.sp
.ne 2
.mk
.na
\fB\fB-r\fR\fR
.ad
.sp .6
.RS 4n
Recursively destroy any snapshots more recent than the one specified.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-R\fR\fR
.ad
.sp .6
.RS 4n
Recursively destroy any more recent snapshots, as well as any clones of those
snapshots.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-f\fR\fR
.ad
.sp .6
.RS 4n
Used with the \fB-R\fR option to force an unmount of any clone file systems
that are to be destroyed.
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs clone\fR [\fB-p\fR] [\fB-o\fR \fIproperty\fR=\fIvalue\fR] ...
\fIsnapshot\fR \fIfilesystem\fRfR
.ad
.sp .6
.RS 4n
Creates a clone of the given snapshot. See the "Clones" section for details.
The target dataset can be located anywhere in the \fBZFS\fR hierarchy, and is
created as the same type as the original.
.sp
.ne 2
.mk
.na
\fB\fB-p\fR\fR
.ad
.sp .6
.RS 4n
Creates all the non-existing parent datasets. Datasets created in this manner
are automatically mounted according to the \fBmountpoint\fR property inherited
from their parent. If the target filesystem already exists, the operation
completes successfully.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-o\fR \fIproperty\fR=\fIvalue\fR\fR
.ad
.sp .6
.RS 4n
Sets the specified property; see \fBzfs create\fR for details.
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs promote\fR \fIclone-filesystem\fR\fR
.ad
.sp .6
.RS 4n
Promotes a clone file system to no longer be dependent on its "origin"
snapshot. This makes it possible to destroy the file system that the clone
was created from. The clone parent-child dependency relationship is reversed,
so that the origin file system becomes a clone of the specified file system. 
.sp
The snapshot that was cloned, and any snapshots previous to this snapshot,
are now owned by the promoted clone. The space they use moves from the origin
file system to the promoted clone, so enough space must be available to
accommodate these snapshots. No new space is consumed by this operation, but
the space accounting is adjusted. The promoted clone must not have any
conflicting snapshot names of its own. The \fBrename\fR subcommand can be used
to rename any conflicting snapshots.
.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs rename\fR \fIfilesystem\fR|\fIsnapshot\fR\fR
.ad
.br
.na
\fB\fIfilesystem\fR|\fIsnapshot\fR\fR
.ad
.br
.na
\fB\fBzfs rename\fR [\fB-p\fR] \fIfilesystem\fR \fIfilesystem\fR\fR
.ad
.sp .6
.RS 4n
Renames the given dataset. The new target can be located anywhere in the
\fBZFS\fR hierarchy, with the exception of snapshots. Snapshots can only be
renamed within the parent file system. When renaming a snapshot, the parent
file system of the snapshot does not need to be specified as part of the
second argument. Renamed file systems can inherit new mount points, in which
case they are unmounted and remounted at the new mount point.
.sp
.ne 2
.mk
.na
\fB\fB-p\fR\fR
.ad
.sp .6
.RS 4n
Creates all the nonexistent parent datasets. Datasets created in this manner
are automatically mounted according to the \fBmountpoint\fR property inherited
from their parent.
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs rename\fR \fB-r\fR \fIsnapshot\fR \fIsnapshot\fR\fR
.ad
.sp .6
.RS 4n
Recursively rename the snapshots of all descendent datasets. Snapshots are the
only dataset that can be renamed recursively.
.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs\fR \fBlist\fR [\fB-r\fR|\fB-d\fR \fIdepth\fR] [\fB-H\fR] [\fB-o\fR
\fIproperty\fR[,\fI\&...\fR]] [ \fB-t\fR \fItype\fR[,\fI\&...\fR]] [ \fB-s\fR
\fIproperty\fR ] ... [ \fB-S\fR \fIproperty\fR ] ...
[\fIfilesystem\fR|\fIsnapshot\fR] ...\fR
.ad
.sp .6
.RS 4n
Lists the property information for the given datasets in tabular form. If
specified, you can list property information by the absolute pathname or the
relative pathname. By default, all file systems are displayed. Snapshots are
displayed if the \fBlistsnaps\fR property is \fBon\fR (the default is
\fBoff\fR) . The following fields are displayed,
\fBname,used,available,referenced,mountpoint\fR.
.sp
.ne 2
.mk
.na
\fB\fB-H\fR\fR
.ad
.sp .6
.RS 4n
Used for scripting mode. Do not print headers and separate fields by a single
tab instead of arbitrary white space.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-r\fR\fR
.ad
.sp .6
.RS 4n
Recursively display any children of the dataset on the command line. 
.RE

.sp
.ne 2
.mk
.na
\fB\fB-d\fR \fIdepth\fR\fR
.ad
.sp .6
.RS 4n
Recursively display any children of the dataset, limiting the recursion to
\fIdepth\fR. A depth of \fB1\fR will display only the dataset and its direct
children.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-o\fR \fIproperty\fR\fR
.ad
.sp .6
.RS 4n
A comma-separated list of properties to display. The property must be:
.RS +4
.TP
.ie t \(bu
.el o
One of the properties described in the "Native Properties" section
.RE
.RS +4
.TP
.ie t \(bu
.el o
A user property
.RE
.RS +4
.TP
.ie t \(bu
.el o
The value \fBname\fR to display the dataset name
.RE
.RS +4
.TP
.ie t \(bu
.el o
The value \fBspace\fR to display space usage properties on file systems. This
is a shortcut for specifying \fB-o
name,avail,used,usedsnap,usedds,usedrefreserv,usedchild\fR \fB-t
filesystem\fR syntax.
.RE
.RE

.sp
.ne 2
.mk
.na
\fB\fB-s\fR \fIproperty\fR\fR
.ad
.sp .6
.RS 4n
A property for sorting the output by column in ascending order based on the
value of the property. The property must be one of the properties described
in the "Properties" section, or the special value \fBname\fR to sort by the
dataset name. Multiple properties can be specified at one time using multiple
\fB-s\fR property options. Multiple \fB-s\fR options are evaluated from left
to right in decreasing order of importance.
.sp
The following is a list of sorting criteria:
.RS +4
.TP
.ie t \(bu
.el o
Numeric types sort in numeric order.
.RE
.RS +4
.TP
.ie t \(bu
.el o
String types sort in alphabetical order.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Types inappropriate for a row sort that row to the literal bottom, regardless
of the specified ordering.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If no sorting options are specified the existing behavior of \fBzfs list\fR is
preserved.
.RE
.RE

.sp
.ne 2
.mk
.na
\fB\fB-S\fR \fIproperty\fR\fR
.ad
.sp .6
.RS 4n
Same as the \fB-s\fR option, but sorts by property in descending order. 
.RE

.sp
.ne 2
.mk
.na
\fB\fB-t\fR \fItype\fR\fR
.ad
.sp .6
.RS 4n
A comma-separated list of types to display, where \fItype\fR is one of
\fBfilesystem\fR, \fBsnapshot\fR , or \fBall\fR. For example, specifying
\fB-t snapshot\fR displays only snapshots.
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs set\fR \fIproperty\fR=\fIvalue\fR \fIfilesystem\fR|\fIsnapshot\fR
...\fR
.ad
.sp .6
.RS 4n
Sets the property to the given value for each dataset. Only some properties
can be edited. See the "Properties" section for more information on what
properties can be set and acceptable values. Numeric values can be specified
as exact values, or in a human-readable form with a suffix of \fBB\fR,
\fBK\fR, \fBM\fR, \fBG\fR, \fBT\fR, \fBP\fR, \fBE\fR, \fBZ\fR (for bytes,
kilobytes, megabytes, gigabytes, terabytes, petabytes, exabytes, or zettabytes,
respectively). User properties can be set on snapshots. For more information,
see the "User Properties" section.
.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs get\fR [\fB-r\fR|\fB-d\fR \fIdepth\fR] [\fB-Hp\fR] [\fB-o\fR
\fIfield\fR[,...] [\fB-s\fR \fIsource\fR[,...] "\fIall\fR" |
\fIproperty\fR[,...] \fIfilesystem\fR|\fIsnapshot\fR ...\fR
.ad
.sp .6
.RS 4n
Displays properties for the given datasets. If no datasets are specified, then
the command displays properties for all datasets on the system. For each
property, the following columns are displayed:
.sp
.in +2
.nf
    name      Dataset name
     property  Property name
     value     Property value
     source    Property source. Can either be local, default,
               temporary, inherited, or none (-).
.fi
.in -2
.sp

All columns are displayed by default, though this can be controlled by using
the \fB-o\fR option. This command takes a comma-separated list of properties
as described in the "Native Properties" and "User Properties" sections.
.sp
The special value \fBall\fR can be used to display all properties that apply
to the given dataset's type (filesystem or snapshot).
.sp
.ne 2
.mk
.na
\fB\fB-r\fR\fR
.ad
.sp .6
.RS 4n
Recursively display properties for any children.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-d\fR \fIdepth\fR\fR
.ad
.sp .6
.RS 4n
Recursively display any children of the dataset, limiting the recursion to
\fIdepth\fR. A depth of \fB1\fR will display only the dataset and its direct
children.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-H\fR\fR
.ad
.sp .6
.RS 4n
Display output in a form more easily parsed by scripts. Any headers are
omitted, and fields are explicitly separated by a single tab instead of
an arbitrary amount of space.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-o\fR \fIfield\fR\fR
.ad
.sp .6
.RS 4n
A comma-separated list of columns to display. \fBname,property,value,source\fR
is the default value. 
.RE

.sp
.ne 2
.mk
.na
\fB\fB-s\fR \fIsource\fR\fR
.ad
.sp .6
.RS 4n
A comma-separated list of sources to display. Those properties coming from a
source other than those in this list are ignored. Each source must be one of
the following: \fBlocal,default,inherited,temporary,none\fR. The default value
is all sources.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-p\fR\fR
.ad
.sp .6
.RS 4n
Display numbers in parseable (exact) values.
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs inherit\fR [\fB-rS\fR] \fIproperty\fR \fIfilesystem\fR |
\fIsnapshot\fR ...\fR
.ad
.sp .6
.RS 4n
Clears the specified property, causing it to be inherited from an ancestor.
If no ancestor has the property set, then the default value is used. See the
"Properties" section for a listing of default values, and details on which
properties can be inherited.
.sp
.ne 2
.mk
.na
\fB\fB-r\fR\fR
.ad
.sp .6
.RS 4n
Recursively inherit the given property for all children.
.RE
.sp
.ne 2
.mk
.na
\fB\fB-S\fR\fR
.ad
.sp .6
.RS 4n
Revert to the received property value, if any. If the property does not have a
received value, the behavior of \fBzfs inherit -S\fR is the same as
\fBzfs inherit\fR without \fB-S\fR. If the property does have a received value,
\fBzfs inherit\fR masks the received value with the inherited value until
\fBzfs inherit -S\fR reverts to the received value.
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs upgrade\fR\fR
.ad
.sp .6
.RS 4n
Identifies a file system version, which determines available file system
features in the currently running software release. In most cases, you can continue to use
older file system versions, but some features might not be available.
.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs upgrade\fR [\fB-v\fR]\fR
.ad
.sp .6
.RS 4n
Displays ZFS file system versions that are supported by the current software.
The current ZFS file system versions and all previously supported versions are
displayed, along with an explanation of the features provided with each version.
.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs userspace\fR [\fB-nHp\fR] [\fB-o\fR \fIfield\fR[,...]] [\fB-sS\fR
\fIfield\fR]... [\fB-t\fR \fItype\fR [,...]] \fIfilesystem\fR |
\fIsnapshot\fR\fR
.ad
.sp .6
.RS 4n
Displays space consumed by, and quotas on, each user in the specified
filesystem or snapshot. This corresponds to the \fBuserused@\fR\fIuser\fR
and \fBuserquota@\fR\fIuser\fR properties.
.sp
.ne 2
.mk
.na
\fB\fB-n\fR\fR
.ad
.sp .6
.RS 4n
Print numeric ID instead of user/group name.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-H\fR\fR
.ad
.sp .6
.RS 4n
Do not print headers, use tab-delimited output.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-p\fR\fR
.ad
.sp .6
.RS 4n
Use exact (parseable) numeric output.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-o\fR \fIfield\fR[,...]\fR
.ad
.sp .6
.RS 4n
Display only the specified fields from the following set,
\fBtype,name,used,quota\fR.The default is to display all fields.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-s\fR \fIfield\fR\fR
.ad
.sp .6
.RS 4n
Sort output by this field. The \fIs\fR and \fIS\fR flags may be specified
multiple times to sort first by one field, then by another. The default is
\fB-s type\fR \fB-s name\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-S\fR \fIfield\fR\fR
.ad
.sp .6
.RS 4n
Sort by this field in reverse order. See \fB-s\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-t\fR \fItype\fR[,...]\fR
.ad
.sp .6
.RS 4n
Print only the specified types from the following set,
\fBall,posixuser,posixgroup\fR.
.sp
The default is \fB-t posixuser,smbuser\fR
.sp
The default can be changed to include group types.
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs groupspace\fR [\fB-niHp\fR] [\fB-o\fR \fIfield\fR[,...]] [\fB-sS\fR
\fIfield\fR]... [\fB-t\fR \fItype\fR [,...]] \fIfilesystem\fR |
\fIsnapshot\fR\fR
.ad
.sp .6
.RS 4n
Displays space consumed by, and quotas on, each group in the specified
filesystem or snapshot. This subcommand is identical to \fBzfs userspace\fR,
except that the default types to display are \fB-t posixgroup\fR.
.sp
.in +2
.nf
-
.fi
.in -2
.sp

.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs mount\fR\fR
.ad
.sp .6
.RS 4n
Displays all \fBZFS\fR file systems currently mounted.
.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs mount\fR [\fB-vO\fR] [\fB-o\fR \fIoptions\fR] \fB-a\fR |
\fIfilesystem\fR\fR
.ad
.sp .6
.RS 4n
Mounts \fBZFS\fR file systems. Invoked automatically as part of the boot process.
.sp
.ne 2
.mk
.na
\fB\fB-o\fR \fIoptions\fR\fR
.ad
.sp .6
.RS 4n
An optional, comma-separated list of mount options to use temporarily for the
duration of the mount. See the "Temporary Mount Point Properties" section for
details.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-O\fR\fR
.ad
.sp .6
.RS 4n
Perform an overlay mount. See \fBmount\fR(8) for more information.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-v\fR\fR
.ad
.sp .6
.RS 4n
Report mount progress.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-a\fR\fR
.ad
.sp .6
.RS 4n
Mount all available \fBZFS\fR file systems. Invoked automatically as part of
the boot process. 
.RE

.sp
.ne 2
.mk
.na
\fB\fIfilesystem\fR\fR
.ad
.sp .6
.RS 4n
Mount the specified filesystem.
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs unmount\fR [\fB-f\fR] \fB-a\fR | \fIfilesystem\fR|\fImountpoint\fR\fR
.ad
.sp .6
.RS 4n
Unmounts currently mounted \fBZFS\fR file systems. Invoked automatically as
part of the shutdown process.
.sp
.ne 2
.mk
.na
\fB\fB-f\fR\fR
.ad
.sp .6
.RS 4n
Forcefully unmount the file system, even if it is currently in use.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-a\fR\fR
.ad
.sp .6
.RS 4n
Unmount all available \fBZFS\fR file systems. Invoked automatically as part
of the boot process. 
.RE

.sp
.ne 2
.mk
.na
\fB\fIfilesystem\fR|\fImountpoint\fR\fR
.ad
.sp .6
.RS 4n
Unmount the specified filesystem. The command can also be given a path to a
\fBZFS\fR file system mount point on the system.
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs send\fR [\fB-vRDp\fR] [\fB-\fR[\fBiI\fR] \fIsnapshot\fR]
\fIsnapshot\fR\fR
.ad
.sp .6
.RS 4n
Creates a stream representation of the second \fIsnapshot\fR, which is written
to standard output. The output can be redirected to a file or to a different
system (for example, using \fBssh\fR(1)). By default, a full stream is
generated.
.sp
.ne 2
.mk
.na
\fB\fB-i\fR \fIsnapshot\fR\fR
.ad
.sp .6
.RS 4n
Generate an incremental stream from the first \fIsnapshot\fR to the second
\fIsnapshot\fR. The incremental source (the first \fIsnapshot\fR) can be
specified as the last component of the snapshot name (for example, the part
after the \fB@\fR), and it is assumed to be from the same file system as the
second \fIsnapshot\fR.
.sp
If the destination is a clone, the source may be the origin snapshot, which
must be fully specified (for example, \fBpool/fs@origin\fR, not just
\fB@origin\fR).
.RE

.sp
.ne 2
.mk
.na
\fB\fB-I\fR \fIsnapshot\fR\fR
.ad
.sp .6
.RS 4n
Generate a stream package that sends all intermediary snapshots from the first
snapshot to the second snapshot. For example, \fB-I @a fs@d\fR is similar to
\fB-i @a fs@b; -i @b fs@c; -i @c fs@d\fR. The incremental source snapshot may
be specified as with the \fB-i\fR option.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-v\fR\fR
.ad
.sp .6
.RS 4n
Print verbose information about the stream package generated.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-R\fR\fR
.ad
.sp .6
.RS 4n
Generate a replication stream package, which will replicate the specified
filesystem, and all descendent file systems, up to the named snapshot. When
received, all properties, snapshots, descendent file systems, and clones are
preserved.
.sp
If the \fB-i\fR or \fB-I\fR flags are used in conjunction with the \fB-R\fR
flag, an incremental replication stream is generated. The current values of
properties, and current snapshot and file system names are set when the stream
is received. If the \fB-F\fR flag is specified when this stream is received,
snapshots and file systems that do not exist on the sending side are destroyed. 
.RE

.sp
.ne 2
.mk
.na
\fB\fB-D\fR\fR
.ad
.sp .6
.RS 4n
This option will cause dedup processing to be performed on the data being
written to a send stream.  Dedup processing is optional because it isn't always
appropriate (some kinds of data have very little duplication) and it has
significant costs:  the checksumming required to detect duplicate blocks is
CPU-intensive and the data that must be maintained while the stream is being
processed can occupy a very large amount of memory.
.sp
Duplicate blocks are detected by calculating a cryptographically strong
checksum on each data block.  Blocks that have the same checksum are presumed
to be identical.  The checksum type used at this time is SHA256.  However, the
stream format contains a field which identifies the checksum type, permitting
other checksums to be used in the future.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-p\fR\fR
.ad
.sp .6
.RS 4n
Include properties in the send stream without the -R option.
.RE

The format of the stream is committed. You will be able to receive your streams
on future versions of \fBZFS\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs receive\fR [\fB-vnFu\fR] \fIfilesystem\fR|\fIsnapshot\fR\fR
.ad
.br
.na
\fB\fBzfs receive\fR [\fB-vnFu\fR] \fB-d\fR \fIfilesystem\fR\fR
.ad
.sp .6
.RS 4n
Creates a snapshot whose contents are as specified in the stream provided on
standard input. If a full stream is received, then a new file system is created
as well. Streams are created using the \fBzfs send\fR subcommand, which by
default creates a full stream. \fBzfs recv\fR can be used as an alias for
\fBzfs receive\fR.
.sp
If an incremental stream is received, then the destination file system must
already exist, and its most recent snapshot must match the incremental stream's
source.
.sp
When a snapshot replication package stream that is generated by using the
\fBzfs send\fR \fB-R\fR command is  received, any snapshots that do not exist
on the sending location are destroyed by using the \fBzfs destroy\fR \fB-d\fR
command.
.sp
The name of the snapshot (and file system, if a full stream is received) that
this subcommand creates depends on the argument type and the \fB-d\fR option.
.sp
If the argument is a snapshot name, the specified \fIsnapshot\fR is created. If
the argument is a file system or a snapshot with the same name as the sent
snapshot is created within the specified \fIfilesystem\fR. If the \fB-d\fR
option is specified, the snapshot name is determined by appending the sent
snapshot's name to the specified \fIfilesystem\fR. If the \fB-d\fR option is
specified, any required file systems within the specified one are created.
.sp
.ne 2
.mk
.na
\fB\fB-d\fR\fR
.ad
.sp .6
.RS 4n
Use the name of the sent snapshot to determine the name of the new snapshot as
described in the paragraph above.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-u\fR\fR
.ad
.sp .6
.RS 4n
File system that is associated with the received stream is not mounted.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-v\fR\fR
.ad
.sp .6
.RS 4n
Print verbose information about the stream and the time required to perform the
receive operation.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-n\fR\fR
.ad
.sp .6
.RS 4n
Do not actually receive the stream. This can be useful in conjunction with the
\fB-v\fR option to verify the name the receive operation would use.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-F\fR\fR
.ad
.sp .6
.RS 4n
Force a rollback of the file system to the most recent snapshot before
performing the receive operation. If receiving an incremental replication
stream (for example, one generated by \fBzfs send -R -[iI]\fR), destroy
snapshots and file systems that do not exist on the sending side.
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs hold\fR [\fB-r\fR] \fItag\fR \fIsnapshot\fR...\fR
.ad
.sp .6
.RS 4n
Adds a single reference, named with the \fItag\fR argument, to the specified
snapshot or snapshots. Each snapshot has its own tag namespace, and tags must
be unique within that space.
.sp
If a hold exists on a snapshot, attempts to destroy that snapshot by using the
\fBzfs destroy\fR command return \fBEBUSY\fR.
.sp
.ne 2
.mk
.na
\fB\fB-r\fR\fR
.ad
.sp .6
.RS 4n
Specifies that a hold with the given tag is applied recursively to the
snapshots of all descendent file systems.
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs holds\fR [\fB-H\fR] [\fB-r\fR] \fIsnapshot\fR...\fR
.ad
.sp .6
.RS 4n
Lists all existing user references for the given snapshot or snapshots.

.sp
.ne 2
.mk
.na
\fB\fB-H\fR\fR
.ad
.sp .6
.RS 4n
Used for scripting mode. Do not print headers and separate fields by a single
tab instead of arbitrary white space.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-r\fR\fR
.ad
.sp .6
.RS 4n
Lists the holds that are set on the named descendent snapshots, in addition to
listing the holds on the named snapshot.
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs release\fR [\fB-r\fR] \fItag\fR \fIsnapshot\fR...\fR
.ad
.sp .6
.RS 4n
Removes a single reference, named with the \fItag\fR argument, from the
specified snapshot or snapshots. The tag must already exist for each snapshot.
.sp
If a hold exists on a snapshot, attempts to destroy that snapshot by using the
\fBzfs destroy\fR command return \fBEBUSY\fR.
.sp
.ne 2
.mk
.na
\fB\fB-r\fR\fR
.ad
.sp .6
.RS 4n
Recursively releases a hold with the given tag on the snapshots of all
descendent file systems.
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fBzfs diff\fR [\fB-FHt\fR] ... \fIsnapshot\fR [\fIsnapshot\fR |
\fIfilesystem\fR]
.ad
.sp .6
.RS 4n
Displays the differences between a snapshot and a descendent filesystem. When a
single snapshot is given, then the current filesystem is used for comparison.
.sp
Any filesystem object that has changed between the snapshot and its descendant
is listed with its full pathname and the following \fBtype\fR prefix:

.sp
.ne 2
.mk
.na
\fB\fB+\fR\fR
.ad
.RS 4n
Indicates the object was added in the descendant.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-\fR\fR
.ad
.RS 4n
Indicates the object was deleted in the descendant.
.RE

.sp
.ne 2
.mk
.na
\fB\fBM\fR\fR
.ad
.RS 4n
Indicates the object was modified in the descendant.
.RE

.sp
.ne 2
.mk
.na
\fB\fBR\fR\fR
.ad
.RS 4n
Indicates the object was renamed in the descendant.
.RE

.sp
If the \fB-F\fR option is used, then the type of object will also be shown in
the output. An "\fB\fBF\fR\fR" represents a file, a "\fB\fB/\fR\fR" represents
a directory and a "\fB\fB@\fR\fR" represents a symbolic link.
.sp
The \fB-H\fR option is used to produce output in a form more easily parsed by
scripts.
.sp
If the \fB-t\fR option is used, the time of the change is listed at the
begining of each line.
.RE

.RE

.SH EXAMPLES
.LP
\fBExample 1 \fRCreating a ZFS File System Hierarchy
.sp
.LP
The following commands create a file system named \fBpool/home\fR and a file
system named \fBpool/home/bob\fR. The mount point \fB/export/home\fR is set
for the parent file system, and is automatically inherited by the child file
system.

.sp
.in +2
.nf
# \fBzfs create pool/home\fR
# \fBzfs set mountpoint=/export/home pool/home\fR
# \fBzfs create pool/home/bob\fR
.fi
.in -2
.sp

.LP
\fBExample 2 \fRCreating a ZFS Snapshot
.sp
.LP
The following command creates a snapshot named \fByesterday\fR. This snapshot
is mounted on demand in the \fB\&.zfs/snapshot\fR directory at the root of the
\fBpool/home/bob\fR file system.

.sp
.in +2
.nf
# \fBzfs snapshot pool/home/bob@yesterday\fR
.fi
.in -2
.sp

.LP
\fBExample 3 \fRCreating and Destroying Multiple Snapshots
.sp
.LP
The following command creates snapshots named \fByesterday\fR of
\fBpool/home\fR and all of its descendent file systems. Each snapshot is
mounted on demand in the \fB\&.zfs/snapshot\fR directory at the root of its
file system. The second command destroys the newly created snapshots.

.sp
.in +2
.nf
# \fBzfs snapshot -r pool/home@yesterday\fR
# \fBzfs destroy -r pool/home@yesterday\fR
.fi
.in -2
.sp

.LP
\fBExample 4 \fRDisabling and Enabling File System Compression
.sp
.LP
The following command disables the \fBcompression\fR property for all file
systems under \fBpool/home\fR. The next command explicitly enables
\fBcompression\fR for \fBpool/home/anne\fR.

.sp
.in +2
.nf
# \fBzfs set compression=off pool/home\fR
# \fBzfs set compression=on pool/home/anne\fR
.fi
.in -2
.sp

.LP
\fBExample 5 \fRListing ZFS Datasets
.sp
.LP
The following command lists all active file systems in the system. Snapshots
are displayed if the \fBlistsnaps\fR property is \fBon\fR. The default is
\fBoff\fR. See \fBzpool\fR(8) for more information on pool properties.

.sp
.in +2
.nf
# \fBzfs list\fR
   NAME                      USED  AVAIL  REFER  MOUNTPOINT
   pool                      450K   457G    18K  /pool
   pool/home                 315K   457G    21K  /export/home
   pool/home/anne             18K   457G    18K  /export/home/anne
   pool/home/bob             276K   457G   276K  /export/home/bob
.fi
.in -2
.sp

.LP
\fBExample 6 \fRSetting a Quota on a ZFS File System
.sp
.LP
The following command sets a quota of 50 Gbytes for \fBpool/home/bob\fR.

.sp
.in +2
.nf
# \fBzfs set quota=50G pool/home/bob\fR
.fi
.in -2
.sp

.LP
\fBExample 7 \fRListing ZFS Properties
.sp
.LP
The following command lists all properties for \fBpool/home/bob\fR.

.sp
.in +2
.nf
# \fBzfs get all pool/home/bob\fR
NAME           PROPERTY              VALUE                  SOURCE
pool/home/bob  type                  filesystem             -
pool/home/bob  creation              Mon May  9 21:30 2011  -
pool/home/bob  used                  96.7G                  -
pool/home/bob  available             20.6G                  -
pool/home/bob  referenced            36.8G                  -
pool/home/bob  compressratio         1.00x                  -
pool/home/bob  mounted               yes                    -
pool/home/bob  quota                 20G                    local
pool/home/bob  reservation           none                   default
pool/home/bob  recordsize            128K                   default
pool/home/bob  mountpoint            /pool/home/bob         default
pool/home/bob  checksum              on                     default
pool/home/bob  compression           on                     local
pool/home/bob  atime                 on                     default
pool/home/bob  devices               on                     default
pool/home/bob  exec                  on                     default
pool/home/bob  setuid                on                     default
pool/home/bob  readonly              off                    default
pool/home/bob  snapdir               visible                local
pool/home/bob  canmount              on                     default
pool/home/bob  copies                1                      default
pool/home/bob  version               5                      -
pool/home/bob  utf8only              on                     -
pool/home/bob  normalization         formD                  -
pool/home/bob  casesensitivity       sensitive              -
pool/home/bob  refquota              none                   default
pool/home/bob  refreservation        none                   default
pool/home/bob  primarycache          all                    default
pool/home/bob  secondarycache        all                    default
pool/home/bob  usedbysnapshots       59.7G                  -
pool/home/bob  usedbydataset         36.8G                  -
pool/home/bob  usedbychildren        240M                   -
pool/home/bob  usedbyrefreservation  0                      -
pool/home/bob  logbias               latency                default
pool/home/bob  sync                  standard               default
.fi
.in -2
.sp

.sp
.LP
The following command gets a single property value.

.sp
.in +2
.nf
# \fBzfs get -H -o value compression pool/home/bob\fR
on
.fi
.in -2
.sp

.sp
.LP
The following command lists all properties with local settings for
\fBpool/home/bob\fR.

.sp
.in +2
.nf
# \fBzfs get -r -s local -o name,property,value all pool/home/bob\fR
NAME           PROPERTY              VALUE
pool/home/bob  quota                 20G
pool/home/bob  compression           on
.fi
.in -2
.sp

.LP
\fBExample 8 \fRRolling Back a ZFS File System
.sp
.LP
The following command reverts the contents of \fBpool/home/anne\fR to the
snapshot named \fByesterday\fR, deleting all intermediate snapshots.

.sp
.in +2
.nf
# \fBzfs rollback -r pool/home/anne@yesterday\fR
.fi
.in -2
.sp

.LP
\fBExample 9 \fRCreating a ZFS Clone
.sp
.LP
The following command creates a writable file system whose initial contents
are the same as \fBpool/home/bob@yesterday\fR.

.sp
.in +2
.nf
# \fBzfs clone pool/home/bob@yesterday pool/clone\fR
.fi
.in -2
.sp

.LP
\fBExample 10 \fRPromoting a ZFS Clone
.sp
.LP
The following commands illustrate how to test out changes to a file system,
and then replace the original file system with the changed one, using clones,
clone promotion, and renaming:

.sp
.in +2
.nf
# \fBzfs create pool/project/production\fR
  populate /pool/project/production with data
# \fBzfs snapshot pool/project/production@today\fR
# \fBzfs clone pool/project/production@today pool/project/beta\fR
make changes to /pool/project/beta and test them
# \fBzfs promote pool/project/beta\fR
# \fBzfs rename pool/project/production pool/project/legacy\fR
# \fBzfs rename pool/project/beta pool/project/production\fR
once the legacy version is no longer needed, it can be destroyed
# \fBzfs destroy pool/project/legacy\fR
.fi
.in -2
.sp

.LP
\fBExample 11 \fRInheriting ZFS Properties
.sp
.LP
The following command causes \fBpool/home/bob\fR and \fBpool/home/anne\fR to
inherit the \fBchecksum\fR property from their parent.

.sp
.in +2
.nf
# \fBzfs inherit checksum pool/home/bob pool/home/anne\fR
.fi
.in -2
.sp

.LP
\fBExample 12 \fRRemotely Replicating ZFS Data
.sp
.LP
The following commands send a full stream and then an incremental stream to a
remote machine, restoring them into \fBpoolB/received/fs@a\fRand
\fBpoolB/received/fs@b\fR, respectively. \fBpoolB\fR must contain the file
system \fBpoolB/received\fR, and must not initially contain
\fBpoolB/received/fs\fR.

.sp
.in +2
.nf
# \fBzfs send pool/fs@a | \e\fR
   \fBssh host zfs receive poolB/received/fs@a\fR
# \fBzfs send -i a pool/fs@b | ssh host \e\fR
   \fBzfs receive poolB/received/fs\fR
.fi
.in -2
.sp

.LP
\fBExample 13 \fRUsing the \fBzfs receive\fR \fB-d\fR Option
.sp
.LP
The following command sends a full stream of \fBpoolA/fsA/fsB@snap\fR to a
remote machine, receiving it into \fBpoolB/received/fsA/fsB@snap\fR. The
\fBfsA/fsB@snap\fR portion of the received snapshot's name is determined from
the name of the sent snapshot. \fBpoolB\fR must contain the file system
\fBpoolB/received\fR. If \fBpoolB/received/fsA\fR does not exist, it is
created as an empty file system.

.sp
.in +2
.nf
# \fBzfs send poolA/fsA/fsB@snap | \e
   ssh host zfs receive -d poolB/received\fR
.fi
.in -2
.sp

.LP
\fBExample 14 \fRSetting User Properties
.sp
.LP
The following example sets the user-defined \fBcom.example:department\fR
property for a dataset.

.sp
.in +2
.nf
# \fBzfs set com.example:department=12345 tank/accounting\fR
.fi
.in -2
.sp

.LP
\fBExample 15 \fRPerforming a Rolling Snapshot
.sp
.LP
The following example shows how to maintain a history of snapshots with a
consistent naming scheme. To keep a week's worth of snapshots, the user
destroys the oldest snapshot, renames the remaining snapshots, and then
creates a new snapshot, as follows:

.sp
.in +2
.nf
# \fBzfs destroy -r pool/users@7daysago\fR
# \fBzfs rename -r pool/users@6daysago @7daysago\fR
# \fBzfs rename -r pool/users@5daysago @6daysago\fR
# \fBzfs rename -r pool/users@yesterday @5daysago\fR
# \fBzfs rename -r pool/users@yesterday @4daysago\fR
# \fBzfs rename -r pool/users@yesterday @3daysago\fR
# \fBzfs rename -r pool/users@yesterday @2daysago\fR
# \fBzfs rename -r pool/users@today @yesterday\fR
# \fBzfs snapshot -r pool/users@today\fR
.fi
.in -2
.sp

.SH EXIT STATUS
.sp
.LP
The following exit values are returned:
.sp
.ne 2
.mk
.na
\fB\fB0\fR\fR
.ad
.sp .6
.RS 4n
Successful completion.
.RE

.sp
.ne 2
.mk
.na
\fB\fB1\fR\fR
.ad
.sp .6
.RS 4n
An error occurred.
.RE

.sp
.ne 2
.mk
.na
\fB\fB2\fR\fR
.ad
.sp .6
.RS 4n
Invalid command line options were specified.
.RE

.SH SEE ALSO
.sp
.LP
\fBchmod\fR(2), \fBfsync\fR(2), \fBgzip\fR(1), \fBssh\fR(1), \fBstat\fR(2), \fBzpool\fR(8)